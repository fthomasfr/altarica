/*
* generated by Xtext
*/
package fr.onair.dsl.safety.altarica.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.onair.dsl.safety.altarica.services.AltaricaGrammarAccess;

public class AltaricaParser extends AbstractContentAssistParser {
	
	@Inject
	private AltaricaGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.onair.dsl.safety.altarica.ui.contentassist.antlr.internal.InternalAltaricaParser createParser() {
		fr.onair.dsl.safety.altarica.ui.contentassist.antlr.internal.InternalAltaricaParser result = new fr.onair.dsl.safety.altarica.ui.contentassist.antlr.internal.InternalAltaricaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractDeclarationAccess().getAlternatives(), "rule__AbstractDeclaration__Alternatives");
					put(grammarAccess.getAbstractDefinitionConstantAccess().getAlternatives(), "rule__AbstractDefinitionConstant__Alternatives");
					put(grammarAccess.getAbstractDomainAccess().getAlternatives(), "rule__AbstractDomain__Alternatives");
					put(grammarAccess.getAbstractSpecificationAccess().getAlternatives(), "rule__AbstractSpecification__Alternatives");
					put(grammarAccess.getPriorityAccess().getAlternatives_0(), "rule__Priority__Alternatives_0");
					put(grammarAccess.getAbstractTypeRefAccess().getAlternatives(), "rule__AbstractTypeRef__Alternatives");
					put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
					put(grammarAccess.getAbstractExpressionAccess().getAlternatives(), "rule__AbstractExpression__Alternatives");
					put(grammarAccess.getAbstractBooleanExpressionAccess().getAlternatives(), "rule__AbstractBooleanExpression__Alternatives");
					put(grammarAccess.getIfThenElseAccess().getThenAlternatives_3_0(), "rule__IfThenElse__ThenAlternatives_3_0");
					put(grammarAccess.getIfThenElseAccess().getElseAlternatives_5_0(), "rule__IfThenElse__ElseAlternatives_5_0");
					put(grammarAccess.getAndAccess().getAlternatives_1_1(), "rule__And__Alternatives_1_1");
					put(grammarAccess.getOrAccess().getAlternatives_1_1(), "rule__Or__Alternatives_1_1");
					put(grammarAccess.getNotAccess().getAlternatives(), "rule__Not__Alternatives");
					put(grammarAccess.getNotAccess().getAlternatives_0_0(), "rule__Not__Alternatives_0_0");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getNavigableVariableAccess().getAlternatives(), "rule__NavigableVariable__Alternatives");
					put(grammarAccess.getNonNavigableVariableAccess().getAlternatives(), "rule__NonNavigableVariable__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0(), "rule__BooleanLiteral__ValueAlternatives_0");
					put(grammarAccess.getPrimitiveTypeKindAccess().getAlternatives(), "rule__PrimitiveTypeKind__Alternatives");
					put(grammarAccess.getFlowKindAccess().getAlternatives(), "rule__FlowKind__Alternatives");
					put(grammarAccess.getConstantDefinitionAccess().getGroup(), "rule__ConstantDefinition__Group__0");
					put(grammarAccess.getExpressionConstantAccess().getGroup(), "rule__ExpressionConstant__Group__0");
					put(grammarAccess.getDomainConstantAccess().getGroup(), "rule__DomainConstant__Group__0");
					put(grammarAccess.getDomainConstantAccess().getGroup_2(), "rule__DomainConstant__Group_2__0");
					put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_2(), "rule__Enumeration__Group_2__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getInitSpecificationAccess().getGroup(), "rule__InitSpecification__Group__0");
					put(grammarAccess.getInitStatementAccess().getGroup(), "rule__InitStatement__Group__0");
					put(grammarAccess.getExternalSpecificationAccess().getGroup(), "rule__ExternalSpecification__Group__0");
					put(grammarAccess.getFlowSpecificationAccess().getGroup(), "rule__FlowSpecification__Group__0");
					put(grammarAccess.getFlowDeclarationAccess().getGroup(), "rule__FlowDeclaration__Group__0");
					put(grammarAccess.getFlowDeclarationAccess().getGroup_1(), "rule__FlowDeclaration__Group_1__0");
					put(grammarAccess.getFlowDeclarationAccess().getGroup_4(), "rule__FlowDeclaration__Group_4__0");
					put(grammarAccess.getFlowDeclarationAccess().getGroup_5(), "rule__FlowDeclaration__Group_5__0");
					put(grammarAccess.getEventSpecificationAccess().getGroup(), "rule__EventSpecification__Group__0");
					put(grammarAccess.getEventDeclarationAccess().getGroup(), "rule__EventDeclaration__Group__0");
					put(grammarAccess.getEventDeclarationAccess().getGroup_1(), "rule__EventDeclaration__Group_1__0");
					put(grammarAccess.getEventDeclarationAccess().getGroup_2(), "rule__EventDeclaration__Group_2__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_1(), "rule__Event__Group_1__0");
					put(grammarAccess.getPriorityAccess().getGroup(), "rule__Priority__Group__0");
					put(grammarAccess.getStateSpecificationAccess().getGroup(), "rule__StateSpecification__Group__0");
					put(grammarAccess.getStateDeclarationAccess().getGroup(), "rule__StateDeclaration__Group__0");
					put(grammarAccess.getStateDeclarationAccess().getGroup_1(), "rule__StateDeclaration__Group_1__0");
					put(grammarAccess.getStateDeclarationAccess().getGroup_4(), "rule__StateDeclaration__Group_4__0");
					put(grammarAccess.getNodeInstanceSpecificationAccess().getGroup(), "rule__NodeInstanceSpecification__Group__0");
					put(grammarAccess.getNodeInstanceDeclarationAccess().getGroup(), "rule__NodeInstanceDeclaration__Group__0");
					put(grammarAccess.getNodeInstanceDeclarationAccess().getGroup_1(), "rule__NodeInstanceDeclaration__Group_1__0");
					put(grammarAccess.getAssertSpecificationAccess().getGroup(), "rule__AssertSpecification__Group__0");
					put(grammarAccess.getAssertAccess().getGroup(), "rule__Assert__Group__0");
					put(grammarAccess.getVectorSpecificationAccess().getGroup(), "rule__VectorSpecification__Group__0");
					put(grammarAccess.getVectorAccess().getGroup(), "rule__Vector__Group__0");
					put(grammarAccess.getVectorAccess().getGroup_2(), "rule__Vector__Group_2__0");
					put(grammarAccess.getVectorAccess().getGroup_4(), "rule__Vector__Group_4__0");
					put(grammarAccess.getVectorParameterAccess().getGroup(), "rule__VectorParameter__Group__0");
					put(grammarAccess.getCardinalityAccess().getGroup_0(), "rule__Cardinality__Group_0__0");
					put(grammarAccess.getCardinalityAccess().getGroup_1(), "rule__Cardinality__Group_1__0");
					put(grammarAccess.getCardinalityAccess().getGroup_2(), "rule__Cardinality__Group_2__0");
					put(grammarAccess.getTransitionSpecificationAccess().getGroup(), "rule__TransitionSpecification__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_4(), "rule__Transition__Group_4__0");
					put(grammarAccess.getTransitionAccess().getGroup_4_1(), "rule__Transition__Group_4_1__0");
					put(grammarAccess.getAffectationAccess().getGroup(), "rule__Affectation__Group__0");
					put(grammarAccess.getSwitchAccess().getGroup(), "rule__Switch__Group__0");
					put(grammarAccess.getCaseExpressionAccess().getGroup(), "rule__CaseExpression__Group__0");
					put(grammarAccess.getIfThenElseAccess().getGroup(), "rule__IfThenElse__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getMinusAccess().getGroup(), "rule__Minus__Group__0");
					put(grammarAccess.getMinusAccess().getGroup_1(), "rule__Minus__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
					put(grammarAccess.getDivisionAccess().getGroup_1(), "rule__Division__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getEqualAccess().getGroup(), "rule__Equal__Group__0");
					put(grammarAccess.getEqualAccess().getGroup_1(), "rule__Equal__Group_1__0");
					put(grammarAccess.getNotEqualAccess().getGroup(), "rule__NotEqual__Group__0");
					put(grammarAccess.getNotEqualAccess().getGroup_1(), "rule__NotEqual__Group_1__0");
					put(grammarAccess.getStrictLowerAccess().getGroup(), "rule__StrictLower__Group__0");
					put(grammarAccess.getStrictLowerAccess().getGroup_1(), "rule__StrictLower__Group_1__0");
					put(grammarAccess.getLowerAccess().getGroup(), "rule__Lower__Group__0");
					put(grammarAccess.getLowerAccess().getGroup_1(), "rule__Lower__Group_1__0");
					put(grammarAccess.getStrictUpperAccess().getGroup(), "rule__StrictUpper__Group__0");
					put(grammarAccess.getStrictUpperAccess().getGroup_1(), "rule__StrictUpper__Group_1__0");
					put(grammarAccess.getUpperAccess().getGroup(), "rule__Upper__Group__0");
					put(grammarAccess.getUpperAccess().getGroup_1(), "rule__Upper__Group_1__0");
					put(grammarAccess.getImplyAccess().getGroup(), "rule__Imply__Group__0");
					put(grammarAccess.getImplyAccess().getGroup_1(), "rule__Imply__Group_1__0");
					put(grammarAccess.getNotAccess().getGroup_0(), "rule__Not__Group_0__0");
					put(grammarAccess.getAtomAccess().getGroup_4(), "rule__Atom__Group_4__0");
					put(grammarAccess.getEventRefAccess().getGroup(), "rule__EventRef__Group__0");
					put(grammarAccess.getEventRefAccess().getGroup_1(), "rule__EventRef__Group_1__0");
					put(grammarAccess.getVariableRefAccess().getGroup(), "rule__VariableRef__Group__0");
					put(grammarAccess.getVariableRefAccess().getGroup_1(), "rule__VariableRef__Group_1__0");
					put(grammarAccess.getSystemAccess().getOwnedDeclarationsAssignment(), "rule__System__OwnedDeclarationsAssignment");
					put(grammarAccess.getConstantDefinitionAccess().getConstantAssignment_1(), "rule__ConstantDefinition__ConstantAssignment_1");
					put(grammarAccess.getConstantDefinitionAccess().getExpressionAssignment_2(), "rule__ConstantDefinition__ExpressionAssignment_2");
					put(grammarAccess.getConstantAccess().getNameAssignment(), "rule__Constant__NameAssignment");
					put(grammarAccess.getExpressionConstantAccess().getOwnedExpressionAssignment_1(), "rule__ExpressionConstant__OwnedExpressionAssignment_1");
					put(grammarAccess.getDomainConstantAccess().getDomainAssignment_1(), "rule__DomainConstant__DomainAssignment_1");
					put(grammarAccess.getDomainConstantAccess().getOwnedExpressionAssignment_2_1(), "rule__DomainConstant__OwnedExpressionAssignment_2_1");
					put(grammarAccess.getDomainAccess().getNameAssignment_1(), "rule__Domain__NameAssignment_1");
					put(grammarAccess.getDomainAccess().getDomainAssignment_3(), "rule__Domain__DomainAssignment_3");
					put(grammarAccess.getRangeAccess().getLowerAssignment_1(), "rule__Range__LowerAssignment_1");
					put(grammarAccess.getRangeAccess().getUpperAssignment_3(), "rule__Range__UpperAssignment_3");
					put(grammarAccess.getEnumerationAccess().getOwnedLiteralsAssignment_1(), "rule__Enumeration__OwnedLiteralsAssignment_1");
					put(grammarAccess.getEnumerationAccess().getOwnedLiteralsAssignment_2_1(), "rule__Enumeration__OwnedLiteralsAssignment_2_1");
					put(grammarAccess.getPrimitiveTypeAccess().getNameAssignment(), "rule__PrimitiveType__NameAssignment");
					put(grammarAccess.getLiteralAccess().getNameAssignment(), "rule__Literal__NameAssignment");
					put(grammarAccess.getNodeAccess().getIsMainAssignment_1(), "rule__Node__IsMainAssignment_1");
					put(grammarAccess.getNodeAccess().getNameAssignment_2(), "rule__Node__NameAssignment_2");
					put(grammarAccess.getNodeAccess().getOwnedSpecificationsAssignment_3(), "rule__Node__OwnedSpecificationsAssignment_3");
					put(grammarAccess.getVariableAttributeAccess().getNameAssignment(), "rule__VariableAttribute__NameAssignment");
					put(grammarAccess.getInitSpecificationAccess().getOwnedInitStatementsAssignment_1(), "rule__InitSpecification__OwnedInitStatementsAssignment_1");
					put(grammarAccess.getInitStatementAccess().getAffectationAssignment_0(), "rule__InitStatement__AffectationAssignment_0");
					put(grammarAccess.getExternalSpecificationAccess().getOwnedDirectivesAssignment_1(), "rule__ExternalSpecification__OwnedDirectivesAssignment_1");
					put(grammarAccess.getExternalDirectiveAccess().getDirectiveAssignment(), "rule__ExternalDirective__DirectiveAssignment");
					put(grammarAccess.getFlowSpecificationAccess().getOwnedDeclarationsAssignment_1(), "rule__FlowSpecification__OwnedDeclarationsAssignment_1");
					put(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsAssignment_0(), "rule__FlowDeclaration__OwnedFlowsAssignment_0");
					put(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsAssignment_1_1(), "rule__FlowDeclaration__OwnedFlowsAssignment_1_1");
					put(grammarAccess.getFlowDeclarationAccess().getDomainAssignment_3(), "rule__FlowDeclaration__DomainAssignment_3");
					put(grammarAccess.getFlowDeclarationAccess().getKindAssignment_4_1(), "rule__FlowDeclaration__KindAssignment_4_1");
					put(grammarAccess.getFlowDeclarationAccess().getAttributeAssignment_5_1(), "rule__FlowDeclaration__AttributeAssignment_5_1");
					put(grammarAccess.getFlowAccess().getNameAssignment(), "rule__Flow__NameAssignment");
					put(grammarAccess.getEventSpecificationAccess().getOwnedEventDeclarationsAssignment_1(), "rule__EventSpecification__OwnedEventDeclarationsAssignment_1");
					put(grammarAccess.getEventDeclarationAccess().getOwnedEventsAssignment_0(), "rule__EventDeclaration__OwnedEventsAssignment_0");
					put(grammarAccess.getEventDeclarationAccess().getOwnedEventsAssignment_1_1(), "rule__EventDeclaration__OwnedEventsAssignment_1_1");
					put(grammarAccess.getEventDeclarationAccess().getAttributeAssignment_2_1(), "rule__EventDeclaration__AttributeAssignment_2_1");
					put(grammarAccess.getEventAccess().getNameAssignment_0(), "rule__Event__NameAssignment_0");
					put(grammarAccess.getEventAccess().getOwnedPriorityAssignment_1_1(), "rule__Event__OwnedPriorityAssignment_1_1");
					put(grammarAccess.getPriorityAccess().getOwnedExpressionAssignment_1(), "rule__Priority__OwnedExpressionAssignment_1");
					put(grammarAccess.getStateSpecificationAccess().getOwnedStateDeclarationsAssignment_1(), "rule__StateSpecification__OwnedStateDeclarationsAssignment_1");
					put(grammarAccess.getStateDeclarationAccess().getOwnedStatesAssignment_0(), "rule__StateDeclaration__OwnedStatesAssignment_0");
					put(grammarAccess.getStateDeclarationAccess().getOwnedStatesAssignment_1_1(), "rule__StateDeclaration__OwnedStatesAssignment_1_1");
					put(grammarAccess.getStateDeclarationAccess().getDomainAssignment_3(), "rule__StateDeclaration__DomainAssignment_3");
					put(grammarAccess.getStateDeclarationAccess().getAttributeAssignment_4_1(), "rule__StateDeclaration__AttributeAssignment_4_1");
					put(grammarAccess.getStateAccess().getNameAssignment(), "rule__State__NameAssignment");
					put(grammarAccess.getDomainRefAccess().getReferenceAssignment(), "rule__DomainRef__ReferenceAssignment");
					put(grammarAccess.getNodeInstanceSpecificationAccess().getOwnedNodeInstanceDeclarationsAssignment_1(), "rule__NodeInstanceSpecification__OwnedNodeInstanceDeclarationsAssignment_1");
					put(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesAssignment_0(), "rule__NodeInstanceDeclaration__OwnedNodeInstancesAssignment_0");
					put(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesAssignment_1_1(), "rule__NodeInstanceDeclaration__OwnedNodeInstancesAssignment_1_1");
					put(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeAssignment_3(), "rule__NodeInstanceDeclaration__NodeTypeAssignment_3");
					put(grammarAccess.getNodeInstanceAccess().getNameAssignment(), "rule__NodeInstance__NameAssignment");
					put(grammarAccess.getAssertSpecificationAccess().getOwnedAssertsAssignment_1(), "rule__AssertSpecification__OwnedAssertsAssignment_1");
					put(grammarAccess.getAssertAccess().getOwnedExpressionsAssignment_0(), "rule__Assert__OwnedExpressionsAssignment_0");
					put(grammarAccess.getVectorSpecificationAccess().getOwnedVectorsAssignment_1(), "rule__VectorSpecification__OwnedVectorsAssignment_1");
					put(grammarAccess.getVectorAccess().getOwnedParametersAssignment_1(), "rule__Vector__OwnedParametersAssignment_1");
					put(grammarAccess.getVectorAccess().getOwnedParametersAssignment_2_1(), "rule__Vector__OwnedParametersAssignment_2_1");
					put(grammarAccess.getVectorAccess().getCardinalityAssignment_4_1(), "rule__Vector__CardinalityAssignment_4_1");
					put(grammarAccess.getVectorParameterAccess().getEventParameterAssignment_0(), "rule__VectorParameter__EventParameterAssignment_0");
					put(grammarAccess.getVectorParameterAccess().getIsRequiredAssignment_1(), "rule__VectorParameter__IsRequiredAssignment_1");
					put(grammarAccess.getCardinalityAccess().getExpressionAssignment_0_1(), "rule__Cardinality__ExpressionAssignment_0_1");
					put(grammarAccess.getCardinalityAccess().getExpressionAssignment_1_1(), "rule__Cardinality__ExpressionAssignment_1_1");
					put(grammarAccess.getCardinalityAccess().getExpressionAssignment_2_1(), "rule__Cardinality__ExpressionAssignment_2_1");
					put(grammarAccess.getTransitionSpecificationAccess().getOwnedTransitionTransitionsAssignment_1(), "rule__TransitionSpecification__OwnedTransitionTransitionsAssignment_1");
					put(grammarAccess.getTransitionAccess().getOwnedExpresionAssignment_0(), "rule__Transition__OwnedExpresionAssignment_0");
					put(grammarAccess.getTransitionAccess().getEventAssignment_2(), "rule__Transition__EventAssignment_2");
					put(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignment_4_0(), "rule__Transition__OwnedAffectationsAssignment_4_0");
					put(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignment_4_1_1(), "rule__Transition__OwnedAffectationsAssignment_4_1_1");
					put(grammarAccess.getAffectationAccess().getStateAssignment_0(), "rule__Affectation__StateAssignment_0");
					put(grammarAccess.getAffectationAccess().getOwnedExpressionAssignment_2(), "rule__Affectation__OwnedExpressionAssignment_2");
					put(grammarAccess.getSwitchAccess().getOwnedCasesAssignment_1(), "rule__Switch__OwnedCasesAssignment_1");
					put(grammarAccess.getSwitchAccess().getDefaultAssignment_3(), "rule__Switch__DefaultAssignment_3");
					put(grammarAccess.getCaseExpressionAccess().getConditionAssignment_0(), "rule__CaseExpression__ConditionAssignment_0");
					put(grammarAccess.getCaseExpressionAccess().getBodyAssignment_2(), "rule__CaseExpression__BodyAssignment_2");
					put(grammarAccess.getIfThenElseAccess().getConditionAssignment_1(), "rule__IfThenElse__ConditionAssignment_1");
					put(grammarAccess.getIfThenElseAccess().getThenAssignment_3(), "rule__IfThenElse__ThenAssignment_3");
					put(grammarAccess.getIfThenElseAccess().getElseAssignment_5(), "rule__IfThenElse__ElseAssignment_5");
					put(grammarAccess.getExpressionAccess().getRightOperandAssignment_1_2(), "rule__Expression__RightOperandAssignment_1_2");
					put(grammarAccess.getMinusAccess().getRightOperandAssignment_1_2(), "rule__Minus__RightOperandAssignment_1_2");
					put(grammarAccess.getMultiplicationAccess().getRightOperandAssignment_1_2(), "rule__Multiplication__RightOperandAssignment_1_2");
					put(grammarAccess.getDivisionAccess().getRightOperandAssignment_1_2(), "rule__Division__RightOperandAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightOperandAssignment_1_2(), "rule__And__RightOperandAssignment_1_2");
					put(grammarAccess.getOrAccess().getRightOperandAssignment_1_2(), "rule__Or__RightOperandAssignment_1_2");
					put(grammarAccess.getEqualAccess().getRightOperandAssignment_1_2(), "rule__Equal__RightOperandAssignment_1_2");
					put(grammarAccess.getNotEqualAccess().getRightOperandAssignment_1_2(), "rule__NotEqual__RightOperandAssignment_1_2");
					put(grammarAccess.getStrictLowerAccess().getRightOperandAssignment_1_2(), "rule__StrictLower__RightOperandAssignment_1_2");
					put(grammarAccess.getLowerAccess().getRightOperandAssignment_1_2(), "rule__Lower__RightOperandAssignment_1_2");
					put(grammarAccess.getStrictUpperAccess().getRightOperandAssignment_1_2(), "rule__StrictUpper__RightOperandAssignment_1_2");
					put(grammarAccess.getUpperAccess().getRightOperandAssignment_1_2(), "rule__Upper__RightOperandAssignment_1_2");
					put(grammarAccess.getImplyAccess().getRightOperandAssignment_1_2(), "rule__Imply__RightOperandAssignment_1_2");
					put(grammarAccess.getNotAccess().getOperandAssignment_0_1(), "rule__Not__OperandAssignment_0_1");
					put(grammarAccess.getEventRefAccess().getVariableAssignment_0(), "rule__EventRef__VariableAssignment_0");
					put(grammarAccess.getEventRefAccess().getNestedVariableAssignment_1_2(), "rule__EventRef__NestedVariableAssignment_1_2");
					put(grammarAccess.getVariableRefAccess().getVariableAssignment_0(), "rule__VariableRef__VariableAssignment_0");
					put(grammarAccess.getVariableRefAccess().getNestedVariableAssignment_1_2(), "rule__VariableRef__NestedVariableAssignment_1_2");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment(), "rule__IntegerLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.onair.dsl.safety.altarica.ui.contentassist.antlr.internal.InternalAltaricaParser typedParser = (fr.onair.dsl.safety.altarica.ui.contentassist.antlr.internal.InternalAltaricaParser) parser;
			typedParser.entryRuleSystem();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AltaricaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AltaricaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
