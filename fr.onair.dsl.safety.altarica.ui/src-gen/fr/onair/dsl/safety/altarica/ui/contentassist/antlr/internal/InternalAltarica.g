/*
* generated by Xtext
*/
grammar InternalAltarica;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.onair.dsl.safety.altarica.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.onair.dsl.safety.altarica.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.onair.dsl.safety.altarica.services.AltaricaGrammarAccess;

}

@parser::members {
 
 	private AltaricaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AltaricaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSystem
entryRuleSystem 
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSystemAccess().getOwnedDeclarationsAssignment()); }
(rule__System__OwnedDeclarationsAssignment)*
{ after(grammarAccess.getSystemAccess().getOwnedDeclarationsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractDeclaration
entryRuleAbstractDeclaration 
:
{ before(grammarAccess.getAbstractDeclarationRule()); }
	 ruleAbstractDeclaration
{ after(grammarAccess.getAbstractDeclarationRule()); } 
	 EOF 
;

// Rule AbstractDeclaration
ruleAbstractDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractDeclarationAccess().getAlternatives()); }
(rule__AbstractDeclaration__Alternatives)
{ after(grammarAccess.getAbstractDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition 
:
{ before(grammarAccess.getConstantDefinitionRule()); }
	 ruleConstantDefinition
{ after(grammarAccess.getConstantDefinitionRule()); } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDefinitionAccess().getGroup()); }
(rule__ConstantDefinition__Group__0)
{ after(grammarAccess.getConstantDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getNameAssignment()); }
(rule__Constant__NameAssignment)
{ after(grammarAccess.getConstantAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractDefinitionConstant
entryRuleAbstractDefinitionConstant 
:
{ before(grammarAccess.getAbstractDefinitionConstantRule()); }
	 ruleAbstractDefinitionConstant
{ after(grammarAccess.getAbstractDefinitionConstantRule()); } 
	 EOF 
;

// Rule AbstractDefinitionConstant
ruleAbstractDefinitionConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractDefinitionConstantAccess().getAlternatives()); }
(rule__AbstractDefinitionConstant__Alternatives)
{ after(grammarAccess.getAbstractDefinitionConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionConstant
entryRuleExpressionConstant 
:
{ before(grammarAccess.getExpressionConstantRule()); }
	 ruleExpressionConstant
{ after(grammarAccess.getExpressionConstantRule()); } 
	 EOF 
;

// Rule ExpressionConstant
ruleExpressionConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionConstantAccess().getGroup()); }
(rule__ExpressionConstant__Group__0)
{ after(grammarAccess.getExpressionConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDomainConstant
entryRuleDomainConstant 
:
{ before(grammarAccess.getDomainConstantRule()); }
	 ruleDomainConstant
{ after(grammarAccess.getDomainConstantRule()); } 
	 EOF 
;

// Rule DomainConstant
ruleDomainConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainConstantAccess().getGroup()); }
(rule__DomainConstant__Group__0)
{ after(grammarAccess.getDomainConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDomain
entryRuleDomain 
:
{ before(grammarAccess.getDomainRule()); }
	 ruleDomain
{ after(grammarAccess.getDomainRule()); } 
	 EOF 
;

// Rule Domain
ruleDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainAccess().getGroup()); }
(rule__Domain__Group__0)
{ after(grammarAccess.getDomainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractDomain
entryRuleAbstractDomain 
:
{ before(grammarAccess.getAbstractDomainRule()); }
	 ruleAbstractDomain
{ after(grammarAccess.getAbstractDomainRule()); } 
	 EOF 
;

// Rule AbstractDomain
ruleAbstractDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractDomainAccess().getAlternatives()); }
(rule__AbstractDomain__Alternatives)
{ after(grammarAccess.getAbstractDomainAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRange
entryRuleRange 
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeAccess().getGroup()); }
(rule__Range__Group__0)
{ after(grammarAccess.getRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeration
entryRuleEnumeration 
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationAccess().getGroup()); }
(rule__Enumeration__Group__0)
{ after(grammarAccess.getEnumerationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getNameAssignment()); }
(rule__PrimitiveType__NameAssignment)
{ after(grammarAccess.getPrimitiveTypeAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getNameAssignment()); }
(rule__Literal__NameAssignment)
{ after(grammarAccess.getLiteralAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getGroup()); }
(rule__Node__Group__0)
{ after(grammarAccess.getNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractSpecification
entryRuleAbstractSpecification 
:
{ before(grammarAccess.getAbstractSpecificationRule()); }
	 ruleAbstractSpecification
{ after(grammarAccess.getAbstractSpecificationRule()); } 
	 EOF 
;

// Rule AbstractSpecification
ruleAbstractSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractSpecificationAccess().getAlternatives()); }
(rule__AbstractSpecification__Alternatives)
{ after(grammarAccess.getAbstractSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableAttribute
entryRuleVariableAttribute 
:
{ before(grammarAccess.getVariableAttributeRule()); }
	 ruleVariableAttribute
{ after(grammarAccess.getVariableAttributeRule()); } 
	 EOF 
;

// Rule VariableAttribute
ruleVariableAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAttributeAccess().getNameAssignment()); }
(rule__VariableAttribute__NameAssignment)
{ after(grammarAccess.getVariableAttributeAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitSpecification
entryRuleInitSpecification 
:
{ before(grammarAccess.getInitSpecificationRule()); }
	 ruleInitSpecification
{ after(grammarAccess.getInitSpecificationRule()); } 
	 EOF 
;

// Rule InitSpecification
ruleInitSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitSpecificationAccess().getGroup()); }
(rule__InitSpecification__Group__0)
{ after(grammarAccess.getInitSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitStatement
entryRuleInitStatement 
:
{ before(grammarAccess.getInitStatementRule()); }
	 ruleInitStatement
{ after(grammarAccess.getInitStatementRule()); } 
	 EOF 
;

// Rule InitStatement
ruleInitStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitStatementAccess().getGroup()); }
(rule__InitStatement__Group__0)
{ after(grammarAccess.getInitStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExternalSpecification
entryRuleExternalSpecification 
:
{ before(grammarAccess.getExternalSpecificationRule()); }
	 ruleExternalSpecification
{ after(grammarAccess.getExternalSpecificationRule()); } 
	 EOF 
;

// Rule ExternalSpecification
ruleExternalSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExternalSpecificationAccess().getGroup()); }
(rule__ExternalSpecification__Group__0)
{ after(grammarAccess.getExternalSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExternalDirective
entryRuleExternalDirective 
:
{ before(grammarAccess.getExternalDirectiveRule()); }
	 ruleExternalDirective
{ after(grammarAccess.getExternalDirectiveRule()); } 
	 EOF 
;

// Rule ExternalDirective
ruleExternalDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExternalDirectiveAccess().getDirectiveAssignment()); }
(rule__ExternalDirective__DirectiveAssignment)
{ after(grammarAccess.getExternalDirectiveAccess().getDirectiveAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowSpecification
entryRuleFlowSpecification 
:
{ before(grammarAccess.getFlowSpecificationRule()); }
	 ruleFlowSpecification
{ after(grammarAccess.getFlowSpecificationRule()); } 
	 EOF 
;

// Rule FlowSpecification
ruleFlowSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowSpecificationAccess().getGroup()); }
(rule__FlowSpecification__Group__0)
{ after(grammarAccess.getFlowSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowDeclaration
entryRuleFlowDeclaration 
:
{ before(grammarAccess.getFlowDeclarationRule()); }
	 ruleFlowDeclaration
{ after(grammarAccess.getFlowDeclarationRule()); } 
	 EOF 
;

// Rule FlowDeclaration
ruleFlowDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowDeclarationAccess().getGroup()); }
(rule__FlowDeclaration__Group__0)
{ after(grammarAccess.getFlowDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlow
entryRuleFlow 
:
{ before(grammarAccess.getFlowRule()); }
	 ruleFlow
{ after(grammarAccess.getFlowRule()); } 
	 EOF 
;

// Rule Flow
ruleFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowAccess().getNameAssignment()); }
(rule__Flow__NameAssignment)
{ after(grammarAccess.getFlowAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventSpecification
entryRuleEventSpecification 
:
{ before(grammarAccess.getEventSpecificationRule()); }
	 ruleEventSpecification
{ after(grammarAccess.getEventSpecificationRule()); } 
	 EOF 
;

// Rule EventSpecification
ruleEventSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventSpecificationAccess().getGroup()); }
(rule__EventSpecification__Group__0)
{ after(grammarAccess.getEventSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventDeclaration
entryRuleEventDeclaration 
:
{ before(grammarAccess.getEventDeclarationRule()); }
	 ruleEventDeclaration
{ after(grammarAccess.getEventDeclarationRule()); } 
	 EOF 
;

// Rule EventDeclaration
ruleEventDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup()); }
(rule__EventDeclaration__Group__0)
{ after(grammarAccess.getEventDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePriority
entryRulePriority 
:
{ before(grammarAccess.getPriorityRule()); }
	 rulePriority
{ after(grammarAccess.getPriorityRule()); } 
	 EOF 
;

// Rule Priority
rulePriority
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPriorityAccess().getGroup()); }
(rule__Priority__Group__0)
{ after(grammarAccess.getPriorityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateSpecification
entryRuleStateSpecification 
:
{ before(grammarAccess.getStateSpecificationRule()); }
	 ruleStateSpecification
{ after(grammarAccess.getStateSpecificationRule()); } 
	 EOF 
;

// Rule StateSpecification
ruleStateSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateSpecificationAccess().getGroup()); }
(rule__StateSpecification__Group__0)
{ after(grammarAccess.getStateSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateDeclaration
entryRuleStateDeclaration 
:
{ before(grammarAccess.getStateDeclarationRule()); }
	 ruleStateDeclaration
{ after(grammarAccess.getStateDeclarationRule()); } 
	 EOF 
;

// Rule StateDeclaration
ruleStateDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateDeclarationAccess().getGroup()); }
(rule__StateDeclaration__Group__0)
{ after(grammarAccess.getStateDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getNameAssignment()); }
(rule__State__NameAssignment)
{ after(grammarAccess.getStateAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractTypeRef
entryRuleAbstractTypeRef 
:
{ before(grammarAccess.getAbstractTypeRefRule()); }
	 ruleAbstractTypeRef
{ after(grammarAccess.getAbstractTypeRefRule()); } 
	 EOF 
;

// Rule AbstractTypeRef
ruleAbstractTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractTypeRefAccess().getAlternatives()); }
(rule__AbstractTypeRef__Alternatives)
{ after(grammarAccess.getAbstractTypeRefAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDomainRef
entryRuleDomainRef 
:
{ before(grammarAccess.getDomainRefRule()); }
	 ruleDomainRef
{ after(grammarAccess.getDomainRefRule()); } 
	 EOF 
;

// Rule DomainRef
ruleDomainRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainRefAccess().getReferenceAssignment()); }
(rule__DomainRef__ReferenceAssignment)
{ after(grammarAccess.getDomainRefAccess().getReferenceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeInstanceSpecification
entryRuleNodeInstanceSpecification 
:
{ before(grammarAccess.getNodeInstanceSpecificationRule()); }
	 ruleNodeInstanceSpecification
{ after(grammarAccess.getNodeInstanceSpecificationRule()); } 
	 EOF 
;

// Rule NodeInstanceSpecification
ruleNodeInstanceSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeInstanceSpecificationAccess().getGroup()); }
(rule__NodeInstanceSpecification__Group__0)
{ after(grammarAccess.getNodeInstanceSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeInstanceDeclaration
entryRuleNodeInstanceDeclaration 
:
{ before(grammarAccess.getNodeInstanceDeclarationRule()); }
	 ruleNodeInstanceDeclaration
{ after(grammarAccess.getNodeInstanceDeclarationRule()); } 
	 EOF 
;

// Rule NodeInstanceDeclaration
ruleNodeInstanceDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getGroup()); }
(rule__NodeInstanceDeclaration__Group__0)
{ after(grammarAccess.getNodeInstanceDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeInstance
entryRuleNodeInstance 
:
{ before(grammarAccess.getNodeInstanceRule()); }
	 ruleNodeInstance
{ after(grammarAccess.getNodeInstanceRule()); } 
	 EOF 
;

// Rule NodeInstance
ruleNodeInstance
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeInstanceAccess().getNameAssignment()); }
(rule__NodeInstance__NameAssignment)
{ after(grammarAccess.getNodeInstanceAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssertSpecification
entryRuleAssertSpecification 
:
{ before(grammarAccess.getAssertSpecificationRule()); }
	 ruleAssertSpecification
{ after(grammarAccess.getAssertSpecificationRule()); } 
	 EOF 
;

// Rule AssertSpecification
ruleAssertSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssertSpecificationAccess().getGroup()); }
(rule__AssertSpecification__Group__0)
{ after(grammarAccess.getAssertSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssert
entryRuleAssert 
:
{ before(grammarAccess.getAssertRule()); }
	 ruleAssert
{ after(grammarAccess.getAssertRule()); } 
	 EOF 
;

// Rule Assert
ruleAssert
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssertAccess().getGroup()); }
(rule__Assert__Group__0)
{ after(grammarAccess.getAssertAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVectorSpecification
entryRuleVectorSpecification 
:
{ before(grammarAccess.getVectorSpecificationRule()); }
	 ruleVectorSpecification
{ after(grammarAccess.getVectorSpecificationRule()); } 
	 EOF 
;

// Rule VectorSpecification
ruleVectorSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorSpecificationAccess().getGroup()); }
(rule__VectorSpecification__Group__0)
{ after(grammarAccess.getVectorSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVector
entryRuleVector 
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorAccess().getGroup()); }
(rule__Vector__Group__0)
{ after(grammarAccess.getVectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVectorParameter
entryRuleVectorParameter 
:
{ before(grammarAccess.getVectorParameterRule()); }
	 ruleVectorParameter
{ after(grammarAccess.getVectorParameterRule()); } 
	 EOF 
;

// Rule VectorParameter
ruleVectorParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorParameterAccess().getGroup()); }
(rule__VectorParameter__Group__0)
{ after(grammarAccess.getVectorParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCardinality
entryRuleCardinality 
:
{ before(grammarAccess.getCardinalityRule()); }
	 ruleCardinality
{ after(grammarAccess.getCardinalityRule()); } 
	 EOF 
;

// Rule Cardinality
ruleCardinality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCardinalityAccess().getAlternatives()); }
(rule__Cardinality__Alternatives)
{ after(grammarAccess.getCardinalityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionSpecification
entryRuleTransitionSpecification 
:
{ before(grammarAccess.getTransitionSpecificationRule()); }
	 ruleTransitionSpecification
{ after(grammarAccess.getTransitionSpecificationRule()); } 
	 EOF 
;

// Rule TransitionSpecification
ruleTransitionSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionSpecificationAccess().getGroup()); }
(rule__TransitionSpecification__Group__0)
{ after(grammarAccess.getTransitionSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAffectation
entryRuleAffectation 
:
{ before(grammarAccess.getAffectationRule()); }
	 ruleAffectation
{ after(grammarAccess.getAffectationRule()); } 
	 EOF 
;

// Rule Affectation
ruleAffectation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAffectationAccess().getGroup()); }
(rule__Affectation__Group__0)
{ after(grammarAccess.getAffectationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractExpression
entryRuleAbstractExpression 
:
{ before(grammarAccess.getAbstractExpressionRule()); }
	 ruleAbstractExpression
{ after(grammarAccess.getAbstractExpressionRule()); } 
	 EOF 
;

// Rule AbstractExpression
ruleAbstractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractExpressionAccess().getAlternatives()); }
(rule__AbstractExpression__Alternatives)
{ after(grammarAccess.getAbstractExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractBooleanExpression
entryRuleAbstractBooleanExpression 
:
{ before(grammarAccess.getAbstractBooleanExpressionRule()); }
	 ruleAbstractBooleanExpression
{ after(grammarAccess.getAbstractBooleanExpressionRule()); } 
	 EOF 
;

// Rule AbstractBooleanExpression
ruleAbstractBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractBooleanExpressionAccess().getAlternatives()); }
(rule__AbstractBooleanExpression__Alternatives)
{ after(grammarAccess.getAbstractBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitch
entryRuleSwitch 
:
{ before(grammarAccess.getSwitchRule()); }
	 ruleSwitch
{ after(grammarAccess.getSwitchRule()); } 
	 EOF 
;

// Rule Switch
ruleSwitch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchAccess().getGroup()); }
(rule__Switch__Group__0)
{ after(grammarAccess.getSwitchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseExpression
entryRuleCaseExpression 
:
{ before(grammarAccess.getCaseExpressionRule()); }
	 ruleCaseExpression
{ after(grammarAccess.getCaseExpressionRule()); } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseExpressionAccess().getGroup()); }
(rule__CaseExpression__Group__0)
{ after(grammarAccess.getCaseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfThenElse
entryRuleIfThenElse 
:
{ before(grammarAccess.getIfThenElseRule()); }
	 ruleIfThenElse
{ after(grammarAccess.getIfThenElseRule()); } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfThenElseAccess().getGroup()); }
(rule__IfThenElse__Group__0)
{ after(grammarAccess.getIfThenElseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinus
entryRuleMinus 
:
{ before(grammarAccess.getMinusRule()); }
	 ruleMinus
{ after(grammarAccess.getMinusRule()); } 
	 EOF 
;

// Rule Minus
ruleMinus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinusAccess().getGroup()); }
(rule__Minus__Group__0)
{ after(grammarAccess.getMinusAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivision
entryRuleDivision 
:
{ before(grammarAccess.getDivisionRule()); }
	 ruleDivision
{ after(grammarAccess.getDivisionRule()); } 
	 EOF 
;

// Rule Division
ruleDivision
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivisionAccess().getGroup()); }
(rule__Division__Group__0)
{ after(grammarAccess.getDivisionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getAndParserRuleCall()); }
	ruleAnd
{ after(grammarAccess.getBooleanExpressionAccess().getAndParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnd
entryRuleAnd 
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getGroup()); }
(rule__And__Group__0)
{ after(grammarAccess.getAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqual
entryRuleEqual 
:
{ before(grammarAccess.getEqualRule()); }
	 ruleEqual
{ after(grammarAccess.getEqualRule()); } 
	 EOF 
;

// Rule Equal
ruleEqual
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualAccess().getGroup()); }
(rule__Equal__Group__0)
{ after(grammarAccess.getEqualAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotEqual
entryRuleNotEqual 
:
{ before(grammarAccess.getNotEqualRule()); }
	 ruleNotEqual
{ after(grammarAccess.getNotEqualRule()); } 
	 EOF 
;

// Rule NotEqual
ruleNotEqual
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotEqualAccess().getGroup()); }
(rule__NotEqual__Group__0)
{ after(grammarAccess.getNotEqualAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStrictLower
entryRuleStrictLower 
:
{ before(grammarAccess.getStrictLowerRule()); }
	 ruleStrictLower
{ after(grammarAccess.getStrictLowerRule()); } 
	 EOF 
;

// Rule StrictLower
ruleStrictLower
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStrictLowerAccess().getGroup()); }
(rule__StrictLower__Group__0)
{ after(grammarAccess.getStrictLowerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLower
entryRuleLower 
:
{ before(grammarAccess.getLowerRule()); }
	 ruleLower
{ after(grammarAccess.getLowerRule()); } 
	 EOF 
;

// Rule Lower
ruleLower
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLowerAccess().getGroup()); }
(rule__Lower__Group__0)
{ after(grammarAccess.getLowerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStrictUpper
entryRuleStrictUpper 
:
{ before(grammarAccess.getStrictUpperRule()); }
	 ruleStrictUpper
{ after(grammarAccess.getStrictUpperRule()); } 
	 EOF 
;

// Rule StrictUpper
ruleStrictUpper
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStrictUpperAccess().getGroup()); }
(rule__StrictUpper__Group__0)
{ after(grammarAccess.getStrictUpperAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUpper
entryRuleUpper 
:
{ before(grammarAccess.getUpperRule()); }
	 ruleUpper
{ after(grammarAccess.getUpperRule()); } 
	 EOF 
;

// Rule Upper
ruleUpper
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUpperAccess().getGroup()); }
(rule__Upper__Group__0)
{ after(grammarAccess.getUpperAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImply
entryRuleImply 
:
{ before(grammarAccess.getImplyRule()); }
	 ruleImply
{ after(grammarAccess.getImplyRule()); } 
	 EOF 
;

// Rule Imply
ruleImply
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplyAccess().getGroup()); }
(rule__Imply__Group__0)
{ after(grammarAccess.getImplyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNot
entryRuleNot 
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotAccess().getAlternatives()); }
(rule__Not__Alternatives)
{ after(grammarAccess.getNotAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventRef
entryRuleEventRef 
:
{ before(grammarAccess.getEventRefRule()); }
	 ruleEventRef
{ after(grammarAccess.getEventRefRule()); } 
	 EOF 
;

// Rule EventRef
ruleEventRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventRefAccess().getGroup()); }
(rule__EventRef__Group__0)
{ after(grammarAccess.getEventRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableRef
entryRuleVariableRef 
:
{ before(grammarAccess.getVariableRefRule()); }
	 ruleVariableRef
{ after(grammarAccess.getVariableRefRule()); } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableRefAccess().getGroup()); }
(rule__VariableRef__Group__0)
{ after(grammarAccess.getVariableRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNonNavigableVariable
entryRuleNonNavigableVariable 
:
{ before(grammarAccess.getNonNavigableVariableRule()); }
	 ruleNonNavigableVariable
{ after(grammarAccess.getNonNavigableVariableRule()); } 
	 EOF 
;

// Rule NonNavigableVariable
ruleNonNavigableVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNonNavigableVariableAccess().getAlternatives()); }
(rule__NonNavigableVariable__Alternatives)
{ after(grammarAccess.getNonNavigableVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
(rule__IntegerLiteral__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule PrimitiveTypeKind
rulePrimitiveTypeKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeKindAccess().getAlternatives()); }
(rule__PrimitiveTypeKind__Alternatives)
{ after(grammarAccess.getPrimitiveTypeKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule FlowKind
ruleFlowKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowKindAccess().getAlternatives()); }
(rule__FlowKind__Alternatives)
{ after(grammarAccess.getFlowKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AbstractDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractDeclarationAccess().getDomainParserRuleCall_0()); }
	ruleDomain
{ after(grammarAccess.getAbstractDeclarationAccess().getDomainParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractDeclarationAccess().getConstantDefinitionParserRuleCall_1()); }
	ruleConstantDefinition
{ after(grammarAccess.getAbstractDeclarationAccess().getConstantDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractDeclarationAccess().getNodeParserRuleCall_2()); }
	ruleNode
{ after(grammarAccess.getAbstractDeclarationAccess().getNodeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractDefinitionConstant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractDefinitionConstantAccess().getExpressionConstantParserRuleCall_0()); }
	ruleExpressionConstant
{ after(grammarAccess.getAbstractDefinitionConstantAccess().getExpressionConstantParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractDefinitionConstantAccess().getDomainConstantParserRuleCall_1()); }
	ruleDomainConstant
{ after(grammarAccess.getAbstractDefinitionConstantAccess().getDomainConstantParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractDomain__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractDomainAccess().getPrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType
{ after(grammarAccess.getAbstractDomainAccess().getPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractDomainAccess().getRangeParserRuleCall_1()); }
	ruleRange
{ after(grammarAccess.getAbstractDomainAccess().getRangeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractDomainAccess().getEnumerationParserRuleCall_2()); }
	ruleEnumeration
{ after(grammarAccess.getAbstractDomainAccess().getEnumerationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractSpecificationAccess().getFlowSpecificationParserRuleCall_0()); }
	ruleFlowSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getFlowSpecificationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getStateSpecificationParserRuleCall_1()); }
	ruleStateSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getStateSpecificationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getEventSpecificationParserRuleCall_2()); }
	ruleEventSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getEventSpecificationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getNodeInstanceSpecificationParserRuleCall_3()); }
	ruleNodeInstanceSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getNodeInstanceSpecificationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getAssertSpecificationParserRuleCall_4()); }
	ruleAssertSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getAssertSpecificationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getVectorSpecificationParserRuleCall_5()); }
	ruleVectorSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getVectorSpecificationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getTransitionSpecificationParserRuleCall_6()); }
	ruleTransitionSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getTransitionSpecificationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getInitSpecificationParserRuleCall_7()); }
	ruleInitSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getInitSpecificationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getAbstractSpecificationAccess().getExternalSpecificationParserRuleCall_8()); }
	ruleExternalSpecification
{ after(grammarAccess.getAbstractSpecificationAccess().getExternalSpecificationParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPriorityAccess().getExclamationMarkKeyword_0_0()); }

	'!' 

{ after(grammarAccess.getPriorityAccess().getExclamationMarkKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getPriorityAccess().getPriorityKeyword_0_1()); }

	'priority' 

{ after(grammarAccess.getPriorityAccess().getPriorityKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractTypeRef__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractTypeRefAccess().getDomainRefParserRuleCall_0()); }
	ruleDomainRef
{ after(grammarAccess.getAbstractTypeRefAccess().getDomainRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractTypeRefAccess().getAbstractDomainParserRuleCall_1()); }
	ruleAbstractDomain
{ after(grammarAccess.getAbstractTypeRefAccess().getAbstractDomainParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getGroup_0()); }
(rule__Cardinality__Group_0__0)
{ after(grammarAccess.getCardinalityAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCardinalityAccess().getGroup_1()); }
(rule__Cardinality__Group_1__0)
{ after(grammarAccess.getCardinalityAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getCardinalityAccess().getGroup_2()); }
(rule__Cardinality__Group_2__0)
{ after(grammarAccess.getCardinalityAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractExpressionAccess().getIfThenElseParserRuleCall_0()); }
	ruleIfThenElse
{ after(grammarAccess.getAbstractExpressionAccess().getIfThenElseParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractExpressionAccess().getSwitchParserRuleCall_1()); }
	ruleSwitch
{ after(grammarAccess.getAbstractExpressionAccess().getSwitchParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractExpressionAccess().getExpressionParserRuleCall_2()); }
	ruleExpression
{ after(grammarAccess.getAbstractExpressionAccess().getExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractBooleanExpressionAccess().getIfThenElseParserRuleCall_0()); }
	ruleIfThenElse
{ after(grammarAccess.getAbstractBooleanExpressionAccess().getIfThenElseParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractBooleanExpressionAccess().getSwitchParserRuleCall_1()); }
	ruleSwitch
{ after(grammarAccess.getAbstractBooleanExpressionAccess().getSwitchParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractBooleanExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
	ruleBooleanExpression
{ after(grammarAccess.getAbstractBooleanExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThenAlternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenSwitchParserRuleCall_3_0_0()); }
	ruleSwitch
{ after(grammarAccess.getIfThenElseAccess().getThenSwitchParserRuleCall_3_0_0()); }
)

    |(
{ before(grammarAccess.getIfThenElseAccess().getThenExpressionParserRuleCall_3_0_1()); }
	ruleExpression
{ after(grammarAccess.getIfThenElseAccess().getThenExpressionParserRuleCall_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ElseAlternatives_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseSwitchParserRuleCall_5_0_0()); }
	ruleSwitch
{ after(grammarAccess.getIfThenElseAccess().getElseSwitchParserRuleCall_5_0_0()); }
)

    |(
{ before(grammarAccess.getIfThenElseAccess().getElseExpressionParserRuleCall_5_0_1()); }
	ruleExpression
{ after(grammarAccess.getIfThenElseAccess().getElseExpressionParserRuleCall_5_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getAndAccess().getAndKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getAndAccess().getAmpersandKeyword_1_1_1()); }

	'&' 

{ after(grammarAccess.getAndAccess().getAmpersandKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrKeyword_1_1_0()); }

	'or' 

{ after(grammarAccess.getOrAccess().getOrKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getOrAccess().getVerticalLineKeyword_1_1_1()); }

	'|' 

{ after(grammarAccess.getOrAccess().getVerticalLineKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getGroup_0()); }
(rule__Not__Group_0__0)
{ after(grammarAccess.getNotAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNotAccess().getAtomParserRuleCall_1()); }
	ruleAtom
{ after(grammarAccess.getNotAccess().getAtomParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getTildeKeyword_0_0_0()); }

	'~' 

{ after(grammarAccess.getNotAccess().getTildeKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getNotAccess().getNotKeyword_0_0_1()); }

	'not' 

{ after(grammarAccess.getNotAccess().getNotKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
{ after(grammarAccess.getAtomAccess().getBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_1()); }
	ruleStringLiteral
{ after(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getIntegerLiteralParserRuleCall_2()); }
	ruleIntegerLiteral
{ after(grammarAccess.getAtomAccess().getIntegerLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getVariableRefParserRuleCall_3()); }
	ruleVariableRef
{ after(grammarAccess.getAtomAccess().getVariableRefParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_4()); }
(rule__Atom__Group_4__0)
{ after(grammarAccess.getAtomAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NonNavigableVariable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonNavigableVariableAccess().getStateParserRuleCall_0()); }
	ruleState
{ after(grammarAccess.getNonNavigableVariableAccess().getStateParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNonNavigableVariableAccess().getLiteralParserRuleCall_1()); }
	ruleLiteral
{ after(grammarAccess.getNonNavigableVariableAccess().getLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNonNavigableVariableAccess().getConstantParserRuleCall_2()); }
	ruleConstant
{ after(grammarAccess.getNonNavigableVariableAccess().getConstantParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNonNavigableVariableAccess().getFlowParserRuleCall_3()); }
	ruleFlow
{ after(grammarAccess.getNonNavigableVariableAccess().getFlowParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypeKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeKindAccess().getINTEGEREnumLiteralDeclaration_0()); }
(	'integer' 
)
{ after(grammarAccess.getPrimitiveTypeKindAccess().getINTEGEREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeKindAccess().getBOOLEANEnumLiteralDeclaration_1()); }
(	'bool' 
)
{ after(grammarAccess.getPrimitiveTypeKindAccess().getBOOLEANEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowKindAccess().getINEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getFlowKindAccess().getINEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getFlowKindAccess().getOUTEnumLiteralDeclaration_1()); }
(	'out' 
)
{ after(grammarAccess.getFlowKindAccess().getOUTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getFlowKindAccess().getINOUTEnumLiteralDeclaration_2()); }
(	'inout' 
)
{ after(grammarAccess.getFlowKindAccess().getINOUTEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ConstantDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinition__Group__0__Impl
	rule__ConstantDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getConstKeyword_0()); }

	'const' 

{ after(grammarAccess.getConstantDefinitionAccess().getConstKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinition__Group__1__Impl
	rule__ConstantDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getConstantAssignment_1()); }
(rule__ConstantDefinition__ConstantAssignment_1)
{ after(grammarAccess.getConstantDefinitionAccess().getConstantAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinition__Group__2__Impl
	rule__ConstantDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getExpressionAssignment_2()); }
(rule__ConstantDefinition__ExpressionAssignment_2)
{ after(grammarAccess.getConstantDefinitionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getConstantDefinitionAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExpressionConstant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionConstant__Group__0__Impl
	rule__ExpressionConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionConstant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionConstantAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getExpressionConstantAccess().getEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionConstant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionConstant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionConstant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionConstantAccess().getOwnedExpressionAssignment_1()); }
(rule__ExpressionConstant__OwnedExpressionAssignment_1)
{ after(grammarAccess.getExpressionConstantAccess().getOwnedExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DomainConstant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainConstant__Group__0__Impl
	rule__DomainConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainConstant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainConstantAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getDomainConstantAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainConstant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainConstant__Group__1__Impl
	rule__DomainConstant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainConstant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainConstantAccess().getDomainAssignment_1()); }
(rule__DomainConstant__DomainAssignment_1)
{ after(grammarAccess.getDomainConstantAccess().getDomainAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainConstant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainConstant__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainConstant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainConstantAccess().getGroup_2()); }
(rule__DomainConstant__Group_2__0)?
{ after(grammarAccess.getDomainConstantAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DomainConstant__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainConstant__Group_2__0__Impl
	rule__DomainConstant__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainConstant__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainConstantAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getDomainConstantAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainConstant__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainConstant__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainConstant__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainConstantAccess().getOwnedExpressionAssignment_2_1()); }
(rule__DomainConstant__OwnedExpressionAssignment_2_1)
{ after(grammarAccess.getDomainConstantAccess().getOwnedExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Domain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__0__Impl
	rule__Domain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getDomainKeyword_0()); }

	'domain' 

{ after(grammarAccess.getDomainAccess().getDomainKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__1__Impl
	rule__Domain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getNameAssignment_1()); }
(rule__Domain__NameAssignment_1)
{ after(grammarAccess.getDomainAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__2__Impl
	rule__Domain__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getDomainAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__3__Impl
	rule__Domain__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getDomainAssignment_3()); }
(rule__Domain__DomainAssignment_3)
{ after(grammarAccess.getDomainAccess().getDomainAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getDomainAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Range__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLowerAssignment_1()); }
(rule__Range__LowerAssignment_1)
{ after(grammarAccess.getRangeAccess().getLowerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__2__Impl
	rule__Range__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getRangeAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__3__Impl
	rule__Range__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getUpperAssignment_3()); }
(rule__Range__UpperAssignment_3)
{ after(grammarAccess.getRangeAccess().getUpperAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getRangeAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Enumeration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getOwnedLiteralsAssignment_1()); }
(rule__Enumeration__OwnedLiteralsAssignment_1)
{ after(grammarAccess.getEnumerationAccess().getOwnedLiteralsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getGroup_2()); }
(rule__Enumeration__Group_2__0)*
{ after(grammarAccess.getEnumerationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Enumeration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group_2__0__Impl
	rule__Enumeration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getEnumerationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getOwnedLiteralsAssignment_2_1()); }
(rule__Enumeration__OwnedLiteralsAssignment_2_1)
{ after(grammarAccess.getEnumerationAccess().getOwnedLiteralsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNodeKeyword_0()); }

	'node' 

{ after(grammarAccess.getNodeAccess().getNodeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__1__Impl
	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getIsMainAssignment_1()); }
(rule__Node__IsMainAssignment_1)?
{ after(grammarAccess.getNodeAccess().getIsMainAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__2__Impl
	rule__Node__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameAssignment_2()); }
(rule__Node__NameAssignment_2)
{ after(grammarAccess.getNodeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__3__Impl
	rule__Node__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getOwnedSpecificationsAssignment_3()); }
(rule__Node__OwnedSpecificationsAssignment_3)*
{ after(grammarAccess.getNodeAccess().getOwnedSpecificationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getEdonKeyword_4()); }

	'edon' 

{ after(grammarAccess.getNodeAccess().getEdonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InitSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitSpecification__Group__0__Impl
	rule__InitSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitSpecificationAccess().getInitKeyword_0()); }

	'init' 

{ after(grammarAccess.getInitSpecificationAccess().getInitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitSpecificationAccess().getOwnedInitStatementsAssignment_1()); }
(rule__InitSpecification__OwnedInitStatementsAssignment_1)*
{ after(grammarAccess.getInitSpecificationAccess().getOwnedInitStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InitStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitStatement__Group__0__Impl
	rule__InitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitStatementAccess().getAffectationAssignment_0()); }
(rule__InitStatement__AffectationAssignment_0)
{ after(grammarAccess.getInitStatementAccess().getAffectationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitStatementAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getInitStatementAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExternalSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalSpecification__Group__0__Impl
	rule__ExternalSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalSpecificationAccess().getExternKeyword_0()); }

	'extern' 

{ after(grammarAccess.getExternalSpecificationAccess().getExternKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalSpecificationAccess().getOwnedDirectivesAssignment_1()); }
(rule__ExternalSpecification__OwnedDirectivesAssignment_1)*
{ after(grammarAccess.getExternalSpecificationAccess().getOwnedDirectivesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowSpecification__Group__0__Impl
	rule__FlowSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowSpecificationAccess().getFlowKeyword_0()); }

	'flow' 

{ after(grammarAccess.getFlowSpecificationAccess().getFlowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowSpecificationAccess().getOwnedDeclarationsAssignment_1()); }
(rule__FlowSpecification__OwnedDeclarationsAssignment_1)*
{ after(grammarAccess.getFlowSpecificationAccess().getOwnedDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__0__Impl
	rule__FlowDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsAssignment_0()); }
(rule__FlowDeclaration__OwnedFlowsAssignment_0)
{ after(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__1__Impl
	rule__FlowDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getGroup_1()); }
(rule__FlowDeclaration__Group_1__0)*
{ after(grammarAccess.getFlowDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__2__Impl
	rule__FlowDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getFlowDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__3__Impl
	rule__FlowDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getDomainAssignment_3()); }
(rule__FlowDeclaration__DomainAssignment_3)
{ after(grammarAccess.getFlowDeclarationAccess().getDomainAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__4__Impl
	rule__FlowDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getGroup_4()); }
(rule__FlowDeclaration__Group_4__0)?
{ after(grammarAccess.getFlowDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__5__Impl
	rule__FlowDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getGroup_5()); }
(rule__FlowDeclaration__Group_5__0)?
{ after(grammarAccess.getFlowDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getFlowDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__FlowDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_1__0__Impl
	rule__FlowDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getFlowDeclarationAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsAssignment_1_1()); }
(rule__FlowDeclaration__OwnedFlowsAssignment_1_1)
{ after(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_4__0__Impl
	rule__FlowDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getColonKeyword_4_0()); }

	':' 

{ after(grammarAccess.getFlowDeclarationAccess().getColonKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getKindAssignment_4_1()); }
(rule__FlowDeclaration__KindAssignment_4_1)
{ after(grammarAccess.getFlowDeclarationAccess().getKindAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_5__0__Impl
	rule__FlowDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getColonKeyword_5_0()); }

	':' 

{ after(grammarAccess.getFlowDeclarationAccess().getColonKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getAttributeAssignment_5_1()); }
(rule__FlowDeclaration__AttributeAssignment_5_1)
{ after(grammarAccess.getFlowDeclarationAccess().getAttributeAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventSpecification__Group__0__Impl
	rule__EventSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventSpecificationAccess().getEventKeyword_0()); }

	'event' 

{ after(grammarAccess.getEventSpecificationAccess().getEventKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventSpecificationAccess().getOwnedEventDeclarationsAssignment_1()); }
(rule__EventSpecification__OwnedEventDeclarationsAssignment_1)*
{ after(grammarAccess.getEventSpecificationAccess().getOwnedEventDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__0__Impl
	rule__EventDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getOwnedEventsAssignment_0()); }
(rule__EventDeclaration__OwnedEventsAssignment_0)
{ after(grammarAccess.getEventDeclarationAccess().getOwnedEventsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__1__Impl
	rule__EventDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup_1()); }
(rule__EventDeclaration__Group_1__0)*
{ after(grammarAccess.getEventDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__2__Impl
	rule__EventDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup_2()); }
(rule__EventDeclaration__Group_2__0)?
{ after(grammarAccess.getEventDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getEventDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EventDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_1__0__Impl
	rule__EventDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getEventDeclarationAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getOwnedEventsAssignment_1_1()); }
(rule__EventDeclaration__OwnedEventsAssignment_1_1)
{ after(grammarAccess.getEventDeclarationAccess().getOwnedEventsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_2__0__Impl
	rule__EventDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getEventDeclarationAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getAttributeAssignment_2_1()); }
(rule__EventDeclaration__AttributeAssignment_2_1)
{ after(grammarAccess.getEventDeclarationAccess().getAttributeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameAssignment_0()); }
(rule__Event__NameAssignment_0)
{ after(grammarAccess.getEventAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getGroup_1()); }
(rule__Event__Group_1__0)?
{ after(grammarAccess.getEventAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Event__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__0__Impl
	rule__Event__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getEventAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__1__Impl
	rule__Event__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getOwnedPriorityAssignment_1_1()); }
(rule__Event__OwnedPriorityAssignment_1_1)
{ after(grammarAccess.getEventAccess().getOwnedPriorityAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getEventAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Priority__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Priority__Group__0__Impl
	rule__Priority__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPriorityAccess().getAlternatives_0()); }
(rule__Priority__Alternatives_0)
{ after(grammarAccess.getPriorityAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Priority__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Priority__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPriorityAccess().getOwnedExpressionAssignment_1()); }
(rule__Priority__OwnedExpressionAssignment_1)
{ after(grammarAccess.getPriorityAccess().getOwnedExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateSpecification__Group__0__Impl
	rule__StateSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateSpecificationAccess().getStateKeyword_0()); }

	'state' 

{ after(grammarAccess.getStateSpecificationAccess().getStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateSpecificationAccess().getOwnedStateDeclarationsAssignment_1()); }
(rule__StateSpecification__OwnedStateDeclarationsAssignment_1)*
{ after(grammarAccess.getStateSpecificationAccess().getOwnedStateDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group__0__Impl
	rule__StateDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getOwnedStatesAssignment_0()); }
(rule__StateDeclaration__OwnedStatesAssignment_0)
{ after(grammarAccess.getStateDeclarationAccess().getOwnedStatesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group__1__Impl
	rule__StateDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getGroup_1()); }
(rule__StateDeclaration__Group_1__0)*
{ after(grammarAccess.getStateDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group__2__Impl
	rule__StateDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getStateDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group__3__Impl
	rule__StateDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getDomainAssignment_3()); }
(rule__StateDeclaration__DomainAssignment_3)
{ after(grammarAccess.getStateDeclarationAccess().getDomainAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group__4__Impl
	rule__StateDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getGroup_4()); }
(rule__StateDeclaration__Group_4__0)?
{ after(grammarAccess.getStateDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getStateDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__StateDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group_1__0__Impl
	rule__StateDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getStateDeclarationAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getOwnedStatesAssignment_1_1()); }
(rule__StateDeclaration__OwnedStatesAssignment_1_1)
{ after(grammarAccess.getStateDeclarationAccess().getOwnedStatesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group_4__0__Impl
	rule__StateDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getColonKeyword_4_0()); }

	':' 

{ after(grammarAccess.getStateDeclarationAccess().getColonKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getAttributeAssignment_4_1()); }
(rule__StateDeclaration__AttributeAssignment_4_1)
{ after(grammarAccess.getStateDeclarationAccess().getAttributeAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeInstanceSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceSpecification__Group__0__Impl
	rule__NodeInstanceSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceSpecificationAccess().getSubKeyword_0()); }

	'sub' 

{ after(grammarAccess.getNodeInstanceSpecificationAccess().getSubKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstanceSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceSpecificationAccess().getOwnedNodeInstanceDeclarationsAssignment_1()); }
(rule__NodeInstanceSpecification__OwnedNodeInstanceDeclarationsAssignment_1)*
{ after(grammarAccess.getNodeInstanceSpecificationAccess().getOwnedNodeInstanceDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeInstanceDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceDeclaration__Group__0__Impl
	rule__NodeInstanceDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesAssignment_0()); }
(rule__NodeInstanceDeclaration__OwnedNodeInstancesAssignment_0)
{ after(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstanceDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceDeclaration__Group__1__Impl
	rule__NodeInstanceDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getGroup_1()); }
(rule__NodeInstanceDeclaration__Group_1__0)*
{ after(grammarAccess.getNodeInstanceDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstanceDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceDeclaration__Group__2__Impl
	rule__NodeInstanceDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getNodeInstanceDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstanceDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceDeclaration__Group__3__Impl
	rule__NodeInstanceDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeAssignment_3()); }
(rule__NodeInstanceDeclaration__NodeTypeAssignment_3)
{ after(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstanceDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getNodeInstanceDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NodeInstanceDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceDeclaration__Group_1__0__Impl
	rule__NodeInstanceDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getNodeInstanceDeclarationAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstanceDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstanceDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesAssignment_1_1()); }
(rule__NodeInstanceDeclaration__OwnedNodeInstancesAssignment_1_1)
{ after(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssertSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertSpecification__Group__0__Impl
	rule__AssertSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertSpecificationAccess().getAssertKeyword_0()); }

	'assert' 

{ after(grammarAccess.getAssertSpecificationAccess().getAssertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertSpecificationAccess().getOwnedAssertsAssignment_1()); }
(rule__AssertSpecification__OwnedAssertsAssignment_1)*
{ after(grammarAccess.getAssertSpecificationAccess().getOwnedAssertsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assert__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group__0__Impl
	rule__Assert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getOwnedExpressionsAssignment_0()); }
(rule__Assert__OwnedExpressionsAssignment_0)
{ after(grammarAccess.getAssertAccess().getOwnedExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assert__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assert__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getAssertAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VectorSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorSpecification__Group__0__Impl
	rule__VectorSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorSpecificationAccess().getSyncKeyword_0()); }

	'sync' 

{ after(grammarAccess.getVectorSpecificationAccess().getSyncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VectorSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorSpecificationAccess().getOwnedVectorsAssignment_1()); }
(rule__VectorSpecification__OwnedVectorsAssignment_1)*
{ after(grammarAccess.getVectorSpecificationAccess().getOwnedVectorsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getVectorAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getOwnedParametersAssignment_1()); }
(rule__Vector__OwnedParametersAssignment_1)
{ after(grammarAccess.getVectorAccess().getOwnedParametersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__2__Impl
	rule__Vector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getGroup_2()); }
(rule__Vector__Group_2__0)*
{ after(grammarAccess.getVectorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__3__Impl
	rule__Vector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getVectorAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__4__Impl
	rule__Vector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getGroup_4()); }
(rule__Vector__Group_4__0)?
{ after(grammarAccess.getVectorAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getVectorAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Vector__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group_2__0__Impl
	rule__Vector__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getVectorAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getOwnedParametersAssignment_2_1()); }
(rule__Vector__OwnedParametersAssignment_2_1)
{ after(grammarAccess.getVectorAccess().getOwnedParametersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vector__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group_4__0__Impl
	rule__Vector__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getLeftSquareBracketKeyword_4_0()); }

	'[' 

{ after(grammarAccess.getVectorAccess().getLeftSquareBracketKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group_4__1__Impl
	rule__Vector__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getCardinalityAssignment_4_1()); }
(rule__Vector__CardinalityAssignment_4_1)
{ after(grammarAccess.getVectorAccess().getCardinalityAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getRightSquareBracketKeyword_4_2()); }

	']' 

{ after(grammarAccess.getVectorAccess().getRightSquareBracketKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VectorParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorParameter__Group__0__Impl
	rule__VectorParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorParameterAccess().getEventParameterAssignment_0()); }
(rule__VectorParameter__EventParameterAssignment_0)
{ after(grammarAccess.getVectorParameterAccess().getEventParameterAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VectorParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorParameterAccess().getIsRequiredAssignment_1()); }
(rule__VectorParameter__IsRequiredAssignment_1)?
{ after(grammarAccess.getVectorParameterAccess().getIsRequiredAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cardinality__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_0__0__Impl
	rule__Cardinality__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getGreaterThanSignKeyword_0_0()); }

	'>' 

{ after(grammarAccess.getCardinalityAccess().getGreaterThanSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionAssignment_0_1()); }
(rule__Cardinality__ExpressionAssignment_0_1)
{ after(grammarAccess.getCardinalityAccess().getExpressionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cardinality__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1__0__Impl
	rule__Cardinality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getGreaterThanSignEqualsSignKeyword_1_0()); }

	'>=' 

{ after(grammarAccess.getCardinalityAccess().getGreaterThanSignEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionAssignment_1_1()); }
(rule__Cardinality__ExpressionAssignment_1_1)
{ after(grammarAccess.getCardinalityAccess().getExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cardinality__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_2__0__Impl
	rule__Cardinality__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getCardinalityAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionAssignment_2_1()); }
(rule__Cardinality__ExpressionAssignment_2_1)
{ after(grammarAccess.getCardinalityAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionSpecification__Group__0__Impl
	rule__TransitionSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionSpecificationAccess().getTransKeyword_0()); }

	'trans' 

{ after(grammarAccess.getTransitionSpecificationAccess().getTransKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionSpecificationAccess().getOwnedTransitionTransitionsAssignment_1()); }
(rule__TransitionSpecification__OwnedTransitionTransitionsAssignment_1)*
{ after(grammarAccess.getTransitionSpecificationAccess().getOwnedTransitionTransitionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getOwnedExpresionAssignment_0()); }
(rule__Transition__OwnedExpresionAssignment_0)
{ after(grammarAccess.getTransitionAccess().getOwnedExpresionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getVerticalLineHyphenMinusKeyword_1()); }

	'|-' 

{ after(grammarAccess.getTransitionAccess().getVerticalLineHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getEventAssignment_2()); }
(rule__Transition__EventAssignment_2)
{ after(grammarAccess.getTransitionAccess().getEventAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3()); }

	'->' 

{ after(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
	rule__Transition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_4()); }
(rule__Transition__Group_4__0)*
{ after(grammarAccess.getTransitionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getTransitionAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Transition__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__0__Impl
	rule__Transition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignment_4_0()); }
(rule__Transition__OwnedAffectationsAssignment_4_0)
{ after(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_4_1()); }
(rule__Transition__Group_4_1__0)*
{ after(grammarAccess.getTransitionAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Transition__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4_1__0__Impl
	rule__Transition__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getTransitionAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignment_4_1_1()); }
(rule__Transition__OwnedAffectationsAssignment_4_1_1)
{ after(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Affectation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Affectation__Group__0__Impl
	rule__Affectation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getStateAssignment_0()); }
(rule__Affectation__StateAssignment_0)
{ after(grammarAccess.getAffectationAccess().getStateAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Affectation__Group__1__Impl
	rule__Affectation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAffectationAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Affectation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getOwnedExpressionAssignment_2()); }
(rule__Affectation__OwnedExpressionAssignment_2)
{ after(grammarAccess.getAffectationAccess().getOwnedExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Switch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__0__Impl
	rule__Switch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getCaseKeyword_0()); }

	'case {' 

{ after(grammarAccess.getSwitchAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__1__Impl
	rule__Switch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getOwnedCasesAssignment_1()); }
(rule__Switch__OwnedCasesAssignment_1)*
{ after(grammarAccess.getSwitchAccess().getOwnedCasesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__2__Impl
	rule__Switch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getElseKeyword_2()); }

	'else' 

{ after(grammarAccess.getSwitchAccess().getElseKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__3__Impl
	rule__Switch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getDefaultAssignment_3()); }
(rule__Switch__DefaultAssignment_3)
{ after(grammarAccess.getSwitchAccess().getDefaultAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CaseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__0__Impl
	rule__CaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getConditionAssignment_0()); }
(rule__CaseExpression__ConditionAssignment_0)
{ after(grammarAccess.getCaseExpressionAccess().getConditionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__1__Impl
	rule__CaseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getCaseExpressionAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__2__Impl
	rule__CaseExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getBodyAssignment_2()); }
(rule__CaseExpression__BodyAssignment_2)
{ after(grammarAccess.getCaseExpressionAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getCaseExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfThenElse__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__0__Impl
	rule__IfThenElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__1__Impl
	rule__IfThenElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getConditionAssignment_1()); }
(rule__IfThenElse__ConditionAssignment_1)
{ after(grammarAccess.getIfThenElseAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__2__Impl
	rule__IfThenElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getIfThenElseAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__3__Impl
	rule__IfThenElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenAssignment_3()); }
(rule__IfThenElse__ThenAssignment_3)
{ after(grammarAccess.getIfThenElseAccess().getThenAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__4__Impl
	rule__IfThenElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseKeyword_4()); }

	'else' 

{ after(grammarAccess.getIfThenElseAccess().getElseKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseAssignment_5()); }
(rule__IfThenElse__ElseAssignment_5)
{ after(grammarAccess.getIfThenElseAccess().getElseAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getMinusParserRuleCall_0()); }
	ruleMinus
{ after(grammarAccess.getExpressionAccess().getMinusParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)*
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAdditionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getAdditionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getExpressionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__Expression__RightOperandAssignment_1_2)
{ after(grammarAccess.getExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Minus__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group__0__Impl
	rule__Minus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getMinusAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getGroup_1()); }
(rule__Minus__Group_1__0)*
{ after(grammarAccess.getMinusAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Minus__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group_1__0__Impl
	rule__Minus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getMinusLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getMinusAccess().getMinusLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group_1__1__Impl
	rule__Minus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1()); }

	'-' 

{ after(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Minus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getRightOperandAssignment_1_2()); }
(rule__Minus__RightOperandAssignment_1_2)
{ after(grammarAccess.getMinusAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
	ruleDivision
{ after(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightOperandAssignment_1_2()); }
(rule__Multiplication__RightOperandAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Division__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__0__Impl
	rule__Division__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getBooleanExpressionParserRuleCall_0()); }
	ruleBooleanExpression
{ after(grammarAccess.getDivisionAccess().getBooleanExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getGroup_1()); }
(rule__Division__Group_1__0)*
{ after(grammarAccess.getDivisionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Division__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__0__Impl
	rule__Division__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getDivisionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getDivisionAccess().getDivisionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__1__Impl
	rule__Division__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getSolidusKeyword_1_1()); }

	'/' 

{ after(grammarAccess.getDivisionAccess().getSolidusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getRightOperandAssignment_1_2()); }
(rule__Division__RightOperandAssignment_1_2)
{ after(grammarAccess.getDivisionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getOrParserRuleCall_0()); }
	ruleOr
{ after(grammarAccess.getAndAccess().getOrParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_1()); }
(rule__And__Group_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAlternatives_1_1()); }
(rule__And__Alternatives_1_1)
{ after(grammarAccess.getAndAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightOperandAssignment_1_2()); }
(rule__And__RightOperandAssignment_1_2)
{ after(grammarAccess.getAndAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getEqualParserRuleCall_0()); }
	ruleEqual
{ after(grammarAccess.getOrAccess().getEqualParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_1()); }
(rule__Or__Group_1__0)*
{ after(grammarAccess.getOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getAlternatives_1_1()); }
(rule__Or__Alternatives_1_1)
{ after(grammarAccess.getOrAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightOperandAssignment_1_2()); }
(rule__Or__RightOperandAssignment_1_2)
{ after(grammarAccess.getOrAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Equal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equal__Group__0__Impl
	rule__Equal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualAccess().getNotEqualParserRuleCall_0()); }
	ruleNotEqual
{ after(grammarAccess.getEqualAccess().getNotEqualParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualAccess().getGroup_1()); }
(rule__Equal__Group_1__0)*
{ after(grammarAccess.getEqualAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equal__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equal__Group_1__0__Impl
	rule__Equal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualAccess().getEqualLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getEqualAccess().getEqualLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equal__Group_1__1__Impl
	rule__Equal__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualAccess().getEqualsSignKeyword_1_1()); }

	'=' 

{ after(grammarAccess.getEqualAccess().getEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equal__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualAccess().getRightOperandAssignment_1_2()); }
(rule__Equal__RightOperandAssignment_1_2)
{ after(grammarAccess.getEqualAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotEqual__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEqual__Group__0__Impl
	rule__NotEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualAccess().getStrictLowerParserRuleCall_0()); }
	ruleStrictLower
{ after(grammarAccess.getNotEqualAccess().getStrictLowerParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotEqual__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEqual__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualAccess().getGroup_1()); }
(rule__NotEqual__Group_1__0)*
{ after(grammarAccess.getNotEqualAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotEqual__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEqual__Group_1__0__Impl
	rule__NotEqual__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualAccess().getNotEqualLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getNotEqualAccess().getNotEqualLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotEqual__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEqual__Group_1__1__Impl
	rule__NotEqual__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualAccess().getExclamationMarkEqualsSignKeyword_1_1()); }

	'!=' 

{ after(grammarAccess.getNotEqualAccess().getExclamationMarkEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotEqual__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEqual__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualAccess().getRightOperandAssignment_1_2()); }
(rule__NotEqual__RightOperandAssignment_1_2)
{ after(grammarAccess.getNotEqualAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StrictLower__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictLower__Group__0__Impl
	rule__StrictLower__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictLower__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictLowerAccess().getLowerParserRuleCall_0()); }
	ruleLower
{ after(grammarAccess.getStrictLowerAccess().getLowerParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrictLower__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictLower__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictLower__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictLowerAccess().getGroup_1()); }
(rule__StrictLower__Group_1__0)*
{ after(grammarAccess.getStrictLowerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StrictLower__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictLower__Group_1__0__Impl
	rule__StrictLower__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictLower__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictLowerAccess().getStrictLowerLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getStrictLowerAccess().getStrictLowerLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrictLower__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictLower__Group_1__1__Impl
	rule__StrictLower__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictLower__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictLowerAccess().getLessThanSignKeyword_1_1()); }

	'<' 

{ after(grammarAccess.getStrictLowerAccess().getLessThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrictLower__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictLower__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictLower__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictLowerAccess().getRightOperandAssignment_1_2()); }
(rule__StrictLower__RightOperandAssignment_1_2)
{ after(grammarAccess.getStrictLowerAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Lower__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lower__Group__0__Impl
	rule__Lower__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerAccess().getStrictUpperParserRuleCall_0()); }
	ruleStrictUpper
{ after(grammarAccess.getLowerAccess().getStrictUpperParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lower__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lower__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerAccess().getGroup_1()); }
(rule__Lower__Group_1__0)*
{ after(grammarAccess.getLowerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lower__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lower__Group_1__0__Impl
	rule__Lower__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerAccess().getLowerLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLowerAccess().getLowerLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lower__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lower__Group_1__1__Impl
	rule__Lower__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerAccess().getLessThanSignEqualsSignKeyword_1_1()); }

	'<=' 

{ after(grammarAccess.getLowerAccess().getLessThanSignEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lower__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lower__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerAccess().getRightOperandAssignment_1_2()); }
(rule__Lower__RightOperandAssignment_1_2)
{ after(grammarAccess.getLowerAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StrictUpper__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictUpper__Group__0__Impl
	rule__StrictUpper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictUpper__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictUpperAccess().getUpperParserRuleCall_0()); }
	ruleUpper
{ after(grammarAccess.getStrictUpperAccess().getUpperParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrictUpper__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictUpper__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictUpper__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictUpperAccess().getGroup_1()); }
(rule__StrictUpper__Group_1__0)*
{ after(grammarAccess.getStrictUpperAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StrictUpper__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictUpper__Group_1__0__Impl
	rule__StrictUpper__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictUpper__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictUpperAccess().getStrictUpperLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getStrictUpperAccess().getStrictUpperLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrictUpper__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictUpper__Group_1__1__Impl
	rule__StrictUpper__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictUpper__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictUpperAccess().getGreaterThanSignKeyword_1_1()); }

	'>' 

{ after(grammarAccess.getStrictUpperAccess().getGreaterThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrictUpper__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrictUpper__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StrictUpper__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictUpperAccess().getRightOperandAssignment_1_2()); }
(rule__StrictUpper__RightOperandAssignment_1_2)
{ after(grammarAccess.getStrictUpperAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Upper__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Upper__Group__0__Impl
	rule__Upper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperAccess().getImplyParserRuleCall_0()); }
	ruleImply
{ after(grammarAccess.getUpperAccess().getImplyParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Upper__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Upper__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperAccess().getGroup_1()); }
(rule__Upper__Group_1__0)*
{ after(grammarAccess.getUpperAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Upper__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Upper__Group_1__0__Impl
	rule__Upper__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperAccess().getUpperLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getUpperAccess().getUpperLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Upper__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Upper__Group_1__1__Impl
	rule__Upper__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperAccess().getGreaterThanSignEqualsSignKeyword_1_1()); }

	'>=' 

{ after(grammarAccess.getUpperAccess().getGreaterThanSignEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Upper__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Upper__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperAccess().getRightOperandAssignment_1_2()); }
(rule__Upper__RightOperandAssignment_1_2)
{ after(grammarAccess.getUpperAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Imply__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imply__Group__0__Impl
	rule__Imply__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Imply__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyAccess().getNotParserRuleCall_0()); }
	ruleNot
{ after(grammarAccess.getImplyAccess().getNotParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imply__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imply__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Imply__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyAccess().getGroup_1()); }
(rule__Imply__Group_1__0)*
{ after(grammarAccess.getImplyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Imply__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imply__Group_1__0__Impl
	rule__Imply__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Imply__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyAccess().getImplyLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getImplyAccess().getImplyLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imply__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imply__Group_1__1__Impl
	rule__Imply__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Imply__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }

	'=>' 

{ after(grammarAccess.getImplyAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imply__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imply__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Imply__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyAccess().getRightOperandAssignment_1_2()); }
(rule__Imply__RightOperandAssignment_1_2)
{ after(grammarAccess.getImplyAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Not__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group_0__0__Impl
	rule__Not__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getAlternatives_0_0()); }
(rule__Not__Alternatives_0_0)
{ after(grammarAccess.getNotAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getOperandAssignment_0_1()); }
(rule__Not__OperandAssignment_0_1)
{ after(grammarAccess.getNotAccess().getOperandAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__0__Impl
	rule__Atom__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__1__Impl
	rule__Atom__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpressionParserRuleCall_4_1()); }
	ruleExpression
{ after(grammarAccess.getAtomAccess().getExpressionParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRef__Group__0__Impl
	rule__EventRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRefAccess().getVariableAssignment_0()); }
(rule__EventRef__VariableAssignment_0)
{ after(grammarAccess.getEventRefAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRefAccess().getGroup_1()); }
(rule__EventRef__Group_1__0)*
{ after(grammarAccess.getEventRefAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventRef__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRef__Group_1__0__Impl
	rule__EventRef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRef__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRefAccess().getNestedQualifiedEventRefTargetAction_1_0()); }
(

)
{ after(grammarAccess.getEventRefAccess().getNestedQualifiedEventRefTargetAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRef__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRef__Group_1__1__Impl
	rule__EventRef__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRef__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRefAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getEventRefAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRef__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRef__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRef__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRefAccess().getNestedVariableAssignment_1_2()); }
(rule__EventRef__NestedVariableAssignment_1_2)
{ after(grammarAccess.getEventRefAccess().getNestedVariableAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableRef__Group__0__Impl
	rule__VariableRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getVariableAssignment_0()); }
(rule__VariableRef__VariableAssignment_0)
{ after(grammarAccess.getVariableRefAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getGroup_1()); }
(rule__VariableRef__Group_1__0)*
{ after(grammarAccess.getVariableRefAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableRef__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableRef__Group_1__0__Impl
	rule__VariableRef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getNestedQualifiedVariableRefTargetAction_1_0()); }
(

)
{ after(grammarAccess.getVariableRefAccess().getNestedQualifiedVariableRefTargetAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableRef__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableRef__Group_1__1__Impl
	rule__VariableRef__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getVariableRefAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableRef__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableRef__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getNestedVariableAssignment_1_2()); }
(rule__VariableRef__NestedVariableAssignment_1_2)
{ after(grammarAccess.getVariableRefAccess().getNestedVariableAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__System__OwnedDeclarationsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getOwnedDeclarationsAbstractDeclarationParserRuleCall_0()); }
	ruleAbstractDeclaration{ after(grammarAccess.getSystemAccess().getOwnedDeclarationsAbstractDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__ConstantAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getConstantConstantParserRuleCall_1_0()); }
	ruleConstant{ after(grammarAccess.getConstantDefinitionAccess().getConstantConstantParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getExpressionAbstractDefinitionConstantParserRuleCall_2_0()); }
	ruleAbstractDefinitionConstant{ after(grammarAccess.getConstantDefinitionAccess().getExpressionAbstractDefinitionConstantParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionConstant__OwnedExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionConstantAccess().getOwnedExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionConstantAccess().getOwnedExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DomainConstant__DomainAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainConstantAccess().getDomainAbstractDomainParserRuleCall_1_0()); }
	ruleAbstractDomain{ after(grammarAccess.getDomainConstantAccess().getDomainAbstractDomainParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DomainConstant__OwnedExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainConstantAccess().getOwnedExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getDomainConstantAccess().getOwnedExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDomainAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__DomainAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getDomainAbstractDomainParserRuleCall_3_0()); }
	ruleAbstractDomain{ after(grammarAccess.getDomainAccess().getDomainAbstractDomainParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__LowerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLowerAtomParserRuleCall_1_0()); }
	ruleAtom{ after(grammarAccess.getRangeAccess().getLowerAtomParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__UpperAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getUpperAtomParserRuleCall_3_0()); }
	ruleAtom{ after(grammarAccess.getRangeAccess().getUpperAtomParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__OwnedLiteralsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__OwnedLiteralsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_2_1_0()); }
	ruleLiteral{ after(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getNamePrimitiveTypeKindEnumRuleCall_0()); }
	rulePrimitiveTypeKind{ after(grammarAccess.getPrimitiveTypeAccess().getNamePrimitiveTypeKindEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__IsMainAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getIsMainMainKeyword_1_0()); }
(
{ before(grammarAccess.getNodeAccess().getIsMainMainKeyword_1_0()); }

	'Main' 

{ after(grammarAccess.getNodeAccess().getIsMainMainKeyword_1_0()); }
)

{ after(grammarAccess.getNodeAccess().getIsMainMainKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__OwnedSpecificationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getOwnedSpecificationsAbstractSpecificationParserRuleCall_3_0()); }
	ruleAbstractSpecification{ after(grammarAccess.getNodeAccess().getOwnedSpecificationsAbstractSpecificationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAttribute__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAttributeAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableAttributeAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitSpecification__OwnedInitStatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitSpecificationAccess().getOwnedInitStatementsInitStatementParserRuleCall_1_0()); }
	ruleInitStatement{ after(grammarAccess.getInitSpecificationAccess().getOwnedInitStatementsInitStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitStatement__AffectationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitStatementAccess().getAffectationAffectationParserRuleCall_0_0()); }
	ruleAffectation{ after(grammarAccess.getInitStatementAccess().getAffectationAffectationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSpecification__OwnedDirectivesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalSpecificationAccess().getOwnedDirectivesExternalDirectiveParserRuleCall_1_0()); }
	ruleExternalDirective{ after(grammarAccess.getExternalSpecificationAccess().getOwnedDirectivesExternalDirectiveParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDirective__DirectiveAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalDirectiveAccess().getDirectiveSL_COMMENTTerminalRuleCall_0()); }
	RULE_SL_COMMENT{ after(grammarAccess.getExternalDirectiveAccess().getDirectiveSL_COMMENTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowSpecification__OwnedDeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowSpecificationAccess().getOwnedDeclarationsFlowDeclarationParserRuleCall_1_0()); }
	ruleFlowDeclaration{ after(grammarAccess.getFlowSpecificationAccess().getOwnedDeclarationsFlowDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__OwnedFlowsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsFlowParserRuleCall_0_0()); }
	ruleFlow{ after(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsFlowParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__OwnedFlowsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsFlowParserRuleCall_1_1_0()); }
	ruleFlow{ after(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsFlowParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__DomainAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getDomainAbstractTypeRefParserRuleCall_3_0()); }
	ruleAbstractTypeRef{ after(grammarAccess.getFlowDeclarationAccess().getDomainAbstractTypeRefParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__KindAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getKindFlowKindEnumRuleCall_4_1_0()); }
	ruleFlowKind{ after(grammarAccess.getFlowDeclarationAccess().getKindFlowKindEnumRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__AttributeAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getAttributeVariableAttributeParserRuleCall_5_1_0()); }
	ruleVariableAttribute{ after(grammarAccess.getFlowDeclarationAccess().getAttributeVariableAttributeParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getFlowAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventSpecification__OwnedEventDeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventSpecificationAccess().getOwnedEventDeclarationsEventDeclarationParserRuleCall_1_0()); }
	ruleEventDeclaration{ after(grammarAccess.getEventSpecificationAccess().getOwnedEventDeclarationsEventDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__OwnedEventsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getOwnedEventsEventParserRuleCall_0_0()); }
	ruleEvent{ after(grammarAccess.getEventDeclarationAccess().getOwnedEventsEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__OwnedEventsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getOwnedEventsEventParserRuleCall_1_1_0()); }
	ruleEvent{ after(grammarAccess.getEventDeclarationAccess().getOwnedEventsEventParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__AttributeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getAttributeVariableAttributeParserRuleCall_2_1_0()); }
	ruleVariableAttribute{ after(grammarAccess.getEventDeclarationAccess().getAttributeVariableAttributeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__OwnedPriorityAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getOwnedPriorityPriorityParserRuleCall_1_1_0()); }
	rulePriority{ after(grammarAccess.getEventAccess().getOwnedPriorityPriorityParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__OwnedExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPriorityAccess().getOwnedExpressionAbstractExpressionParserRuleCall_1_0()); }
	ruleAbstractExpression{ after(grammarAccess.getPriorityAccess().getOwnedExpressionAbstractExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecification__OwnedStateDeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateSpecificationAccess().getOwnedStateDeclarationsStateDeclarationParserRuleCall_1_0()); }
	ruleStateDeclaration{ after(grammarAccess.getStateSpecificationAccess().getOwnedStateDeclarationsStateDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__OwnedStatesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getOwnedStatesStateParserRuleCall_0_0()); }
	ruleState{ after(grammarAccess.getStateDeclarationAccess().getOwnedStatesStateParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__OwnedStatesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getOwnedStatesStateParserRuleCall_1_1_0()); }
	ruleState{ after(grammarAccess.getStateDeclarationAccess().getOwnedStatesStateParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__DomainAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getDomainAbstractTypeRefParserRuleCall_3_0()); }
	ruleAbstractTypeRef{ after(grammarAccess.getStateDeclarationAccess().getDomainAbstractTypeRefParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__AttributeAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getAttributeVariableAttributeParserRuleCall_4_1_0()); }
	ruleVariableAttribute{ after(grammarAccess.getStateDeclarationAccess().getAttributeVariableAttributeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DomainRef__ReferenceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainRefAccess().getReferenceDomainCrossReference_0()); }
(
{ before(grammarAccess.getDomainRefAccess().getReferenceDomainIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getDomainRefAccess().getReferenceDomainIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getDomainRefAccess().getReferenceDomainCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceSpecification__OwnedNodeInstanceDeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceSpecificationAccess().getOwnedNodeInstanceDeclarationsNodeInstanceDeclarationParserRuleCall_1_0()); }
	ruleNodeInstanceDeclaration{ after(grammarAccess.getNodeInstanceSpecificationAccess().getOwnedNodeInstanceDeclarationsNodeInstanceDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__OwnedNodeInstancesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesNodeInstanceParserRuleCall_0_0()); }
	ruleNodeInstance{ after(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesNodeInstanceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__OwnedNodeInstancesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesNodeInstanceParserRuleCall_1_1_0()); }
	ruleNodeInstance{ after(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesNodeInstanceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstanceDeclaration__NodeTypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeNodeCrossReference_3_0()); }
(
{ before(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeNodeIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeNodeIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeNodeCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstance__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getNodeInstanceAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssertSpecification__OwnedAssertsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertSpecificationAccess().getOwnedAssertsAssertParserRuleCall_1_0()); }
	ruleAssert{ after(grammarAccess.getAssertSpecificationAccess().getOwnedAssertsAssertParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assert__OwnedExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertAccess().getOwnedExpressionsAbstractBooleanExpressionParserRuleCall_0_0()); }
	ruleAbstractBooleanExpression{ after(grammarAccess.getAssertAccess().getOwnedExpressionsAbstractBooleanExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorSpecification__OwnedVectorsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorSpecificationAccess().getOwnedVectorsVectorParserRuleCall_1_0()); }
	ruleVector{ after(grammarAccess.getVectorSpecificationAccess().getOwnedVectorsVectorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__OwnedParametersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_1_0()); }
	ruleVectorParameter{ after(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__OwnedParametersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_2_1_0()); }
	ruleVectorParameter{ after(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__CardinalityAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getCardinalityCardinalityParserRuleCall_4_1_0()); }
	ruleCardinality{ after(grammarAccess.getVectorAccess().getCardinalityCardinalityParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorParameter__EventParameterAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorParameterAccess().getEventParameterEventRefParserRuleCall_0_0()); }
	ruleEventRef{ after(grammarAccess.getVectorParameterAccess().getEventParameterEventRefParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorParameter__IsRequiredAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorParameterAccess().getIsRequiredQuestionMarkKeyword_1_0()); }
(
{ before(grammarAccess.getVectorParameterAccess().getIsRequiredQuestionMarkKeyword_1_0()); }

	'?' 

{ after(grammarAccess.getVectorParameterAccess().getIsRequiredQuestionMarkKeyword_1_0()); }
)

{ after(grammarAccess.getVectorParameterAccess().getIsRequiredQuestionMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__ExpressionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_0_1_0()); }
	ruleAbstractExpression{ after(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__ExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_1_1_0()); }
	ruleAbstractExpression{ after(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_2_1_0()); }
	ruleAbstractExpression{ after(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionSpecification__OwnedTransitionTransitionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionSpecificationAccess().getOwnedTransitionTransitionsTransitionParserRuleCall_1_0()); }
	ruleTransition{ after(grammarAccess.getTransitionSpecificationAccess().getOwnedTransitionTransitionsTransitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__OwnedExpresionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getOwnedExpresionAbstractExpressionParserRuleCall_0_0()); }
	ruleAbstractExpression{ after(grammarAccess.getTransitionAccess().getOwnedExpresionAbstractExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__EventAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getEventEventCrossReference_2_0()); }
(
{ before(grammarAccess.getTransitionAccess().getEventEventIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getEventEventIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getEventEventCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__OwnedAffectationsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getOwnedAffectationsAffectationParserRuleCall_4_0_0()); }
	ruleAffectation{ after(grammarAccess.getTransitionAccess().getOwnedAffectationsAffectationParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__OwnedAffectationsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getOwnedAffectationsAffectationParserRuleCall_4_1_1_0()); }
	ruleAffectation{ after(grammarAccess.getTransitionAccess().getOwnedAffectationsAffectationParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__StateAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getStateStateCrossReference_0_0()); }
(
{ before(grammarAccess.getAffectationAccess().getStateStateIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAffectationAccess().getStateStateIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAffectationAccess().getStateStateCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__OwnedExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getOwnedExpressionAbstractExpressionParserRuleCall_2_0()); }
	ruleAbstractExpression{ after(grammarAccess.getAffectationAccess().getOwnedExpressionAbstractExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__OwnedCasesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getOwnedCasesCaseExpressionParserRuleCall_1_0()); }
	ruleCaseExpression{ after(grammarAccess.getSwitchAccess().getOwnedCasesCaseExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__DefaultAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getDefaultExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getSwitchAccess().getDefaultExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__ConditionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getConditionBooleanExpressionParserRuleCall_0_0()); }
	ruleBooleanExpression{ after(grammarAccess.getCaseExpressionAccess().getConditionBooleanExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getBodyExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getCaseExpressionAccess().getBodyExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getConditionBooleanExpressionParserRuleCall_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getIfThenElseAccess().getConditionBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThenAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenAlternatives_3_0()); }
(rule__IfThenElse__ThenAlternatives_3_0)
{ after(grammarAccess.getIfThenElseAccess().getThenAlternatives_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ElseAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseAlternatives_5_0()); }
(rule__IfThenElse__ElseAlternatives_5_0)
{ after(grammarAccess.getIfThenElseAccess().getElseAlternatives_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightOperandMinusParserRuleCall_1_2_0()); }
	ruleMinus{ after(grammarAccess.getExpressionAccess().getRightOperandMinusParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusAccess().getRightOperandMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getMinusAccess().getRightOperandMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightOperandDivisionParserRuleCall_1_2_0()); }
	ruleDivision{ after(grammarAccess.getMultiplicationAccess().getRightOperandDivisionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Division__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getRightOperandBooleanExpressionParserRuleCall_1_2_0()); }
	ruleBooleanExpression{ after(grammarAccess.getDivisionAccess().getRightOperandBooleanExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightOperandOrParserRuleCall_1_2_0()); }
	ruleOr{ after(grammarAccess.getAndAccess().getRightOperandOrParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightOperandEqualParserRuleCall_1_2_0()); }
	ruleEqual{ after(grammarAccess.getOrAccess().getRightOperandEqualParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualAccess().getRightOperandNotEqualParserRuleCall_1_2_0()); }
	ruleNotEqual{ after(grammarAccess.getEqualAccess().getRightOperandNotEqualParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualAccess().getRightOperandStrictLowerParserRuleCall_1_2_0()); }
	ruleStrictLower{ after(grammarAccess.getNotEqualAccess().getRightOperandStrictLowerParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StrictLower__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictLowerAccess().getRightOperandLowerParserRuleCall_1_2_0()); }
	ruleLower{ after(grammarAccess.getStrictLowerAccess().getRightOperandLowerParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerAccess().getRightOperandStrictUpperParserRuleCall_1_2_0()); }
	ruleStrictUpper{ after(grammarAccess.getLowerAccess().getRightOperandStrictUpperParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StrictUpper__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrictUpperAccess().getRightOperandUpperParserRuleCall_1_2_0()); }
	ruleUpper{ after(grammarAccess.getStrictUpperAccess().getRightOperandUpperParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperAccess().getRightOperandImplyParserRuleCall_1_2_0()); }
	ruleImply{ after(grammarAccess.getUpperAccess().getRightOperandImplyParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Imply__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyAccess().getRightOperandNotParserRuleCall_1_2_0()); }
	ruleNot{ after(grammarAccess.getImplyAccess().getRightOperandNotParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Not__OperandAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getOperandAtomParserRuleCall_0_1_0()); }
	ruleAtom{ after(grammarAccess.getNotAccess().getOperandAtomParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRef__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRefAccess().getVariableNavigableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getEventRefAccess().getVariableNavigableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEventRefAccess().getVariableNavigableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEventRefAccess().getVariableNavigableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRef__NestedVariableAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRefAccess().getNestedVariableNavigableVariableCrossReference_1_2_0()); }
(
{ before(grammarAccess.getEventRefAccess().getNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1()); }
	RULE_ID{ after(grammarAccess.getEventRefAccess().getNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1()); }
)
{ after(grammarAccess.getEventRefAccess().getNestedVariableNavigableVariableCrossReference_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getVariableNavigableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getVariableRefAccess().getVariableNavigableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableRefAccess().getVariableNavigableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getVariableRefAccess().getVariableNavigableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__NestedVariableAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getNestedVariableNavigableVariableCrossReference_1_2_0()); }
(
{ before(grammarAccess.getVariableRefAccess().getNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableRefAccess().getNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1()); }
)
{ after(grammarAccess.getVariableRefAccess().getNestedVariableNavigableVariableCrossReference_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
(rule__BooleanLiteral__ValueAlternatives_0)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


