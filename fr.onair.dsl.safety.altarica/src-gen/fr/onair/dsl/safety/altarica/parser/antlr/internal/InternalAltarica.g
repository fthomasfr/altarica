/*
* generated by Xtext
*/
grammar InternalAltarica;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.onair.dsl.safety.altarica.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.onair.dsl.safety.altarica.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import fr.onair.dsl.safety.altarica.services.AltaricaGrammarAccess;

}

@parser::members {

 	private AltaricaGrammarAccess grammarAccess;
 	
    public InternalAltaricaParser(TokenStream input, IAstFactory factory, AltaricaGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("fr/onair/dsl/safety/altarica/parser/antlr/internal/InternalAltarica.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "System";	
   	}
   	
   	@Override
   	protected AltaricaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSystemRule(), currentNode); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSystemAccess().getOwnedDeclarationsAbstractDeclarationParserRuleCall_0(), currentNode); 
	    }
		lv_ownedDeclarations_0_0=ruleAbstractDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSystemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedDeclarations",
	        		lv_ownedDeclarations_0_0, 
	        		"AbstractDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleAbstractDeclaration
entryRuleAbstractDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractDeclarationRule(), currentNode); }
	 iv_ruleAbstractDeclaration=ruleAbstractDeclaration 
	 { $current=$iv_ruleAbstractDeclaration.current; } 
	 EOF 
;

// Rule AbstractDeclaration
ruleAbstractDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDeclarationAccess().getDomainParserRuleCall_0(), currentNode); 
    }
    this_Domain_0=ruleDomain
    { 
        $current = $this_Domain_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDeclarationAccess().getConstantDefinitionParserRuleCall_1(), currentNode); 
    }
    this_ConstantDefinition_1=ruleConstantDefinition
    { 
        $current = $this_ConstantDefinition_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDeclarationAccess().getNodeParserRuleCall_2(), currentNode); 
    }
    this_Node_2=ruleNode
    { 
        $current = $this_Node_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantDefinitionRule(), currentNode); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'const' 
    {
        createLeafNode(grammarAccess.getConstantDefinitionAccess().getConstKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstantDefinitionAccess().getConstantConstantParserRuleCall_1_0(), currentNode); 
	    }
		lv_constant_1_0=ruleConstant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constant",
	        		lv_constant_1_0, 
	        		"Constant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstantDefinitionAccess().getExpressionAbstractDefinitionConstantParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleAbstractDefinitionConstant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"AbstractDefinitionConstant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getConstantDefinitionAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantRule(), currentNode); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleAbstractDefinitionConstant
entryRuleAbstractDefinitionConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractDefinitionConstantRule(), currentNode); }
	 iv_ruleAbstractDefinitionConstant=ruleAbstractDefinitionConstant 
	 { $current=$iv_ruleAbstractDefinitionConstant.current; } 
	 EOF 
;

// Rule AbstractDefinitionConstant
ruleAbstractDefinitionConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDefinitionConstantAccess().getExpressionConstantParserRuleCall_0(), currentNode); 
    }
    this_ExpressionConstant_0=ruleExpressionConstant
    { 
        $current = $this_ExpressionConstant_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDefinitionConstantAccess().getDomainConstantParserRuleCall_1(), currentNode); 
    }
    this_DomainConstant_1=ruleDomainConstant
    { 
        $current = $this_DomainConstant_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExpressionConstant
entryRuleExpressionConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionConstantRule(), currentNode); }
	 iv_ruleExpressionConstant=ruleExpressionConstant 
	 { $current=$iv_ruleExpressionConstant.current; } 
	 EOF 
;

// Rule ExpressionConstant
ruleExpressionConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'=' 
    {
        createLeafNode(grammarAccess.getExpressionConstantAccess().getEqualsSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionConstantAccess().getOwnedExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDomainConstant
entryRuleDomainConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainConstantRule(), currentNode); }
	 iv_ruleDomainConstant=ruleDomainConstant 
	 { $current=$iv_ruleDomainConstant.current; } 
	 EOF 
;

// Rule DomainConstant
ruleDomainConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	':' 
    {
        createLeafNode(grammarAccess.getDomainConstantAccess().getColonKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainConstantAccess().getDomainAbstractDomainParserRuleCall_1_0(), currentNode); 
	    }
		lv_domain_1_0=ruleAbstractDomain		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"domain",
	        		lv_domain_1_0, 
	        		"AbstractDomain", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getDomainConstantAccess().getEqualsSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainConstantAccess().getOwnedExpressionExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_ownedExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainRule(), currentNode); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'domain' 
    {
        createLeafNode(grammarAccess.getDomainAccess().getDomainKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDomainAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getDomainAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getDomainAbstractDomainParserRuleCall_3_0(), currentNode); 
	    }
		lv_domain_3_0=ruleAbstractDomain		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"domain",
	        		lv_domain_3_0, 
	        		"AbstractDomain", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getDomainAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAbstractDomain
entryRuleAbstractDomain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractDomainRule(), currentNode); }
	 iv_ruleAbstractDomain=ruleAbstractDomain 
	 { $current=$iv_ruleAbstractDomain.current; } 
	 EOF 
;

// Rule AbstractDomain
ruleAbstractDomain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDomainAccess().getPrimitiveTypeParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDomainAccess().getRangeParserRuleCall_1(), currentNode); 
    }
    this_Range_1=ruleRange
    { 
        $current = $this_Range_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractDomainAccess().getEnumerationParserRuleCall_2(), currentNode); 
    }
    this_Enumeration_2=ruleEnumeration
    { 
        $current = $this_Enumeration_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRangeRule(), currentNode); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getLowerAtomParserRuleCall_1_0(), currentNode); 
	    }
		lv_lower_1_0=ruleAtom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_1_0, 
	        		"Atom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getRangeAccess().getCommaKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getUpperAtomParserRuleCall_3_0(), currentNode); 
	    }
		lv_upper_3_0=ruleAtom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_3_0, 
	        		"Atom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getRangeAccess().getRightSquareBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationRule(), currentNode); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedLiterals_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedLiterals",
	        		lv_ownedLiterals_1_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_ownedLiterals_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedLiterals",
	        		lv_ownedLiterals_3_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeRule(), currentNode); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeAccess().getNamePrimitiveTypeKindEnumRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=rulePrimitiveTypeKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"PrimitiveTypeKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNodeRule(), currentNode); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'node' 
    {
        createLeafNode(grammarAccess.getNodeAccess().getNodeKeyword_0(), null); 
    }
(
(
		lv_isMain_1_0=	'Main' 
    {
        createLeafNode(grammarAccess.getNodeAccess().getIsMainMainKeyword_1_0(), "isMain"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isMain", true, "Main", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNodeAccess().getOwnedSpecificationsAbstractSpecificationParserRuleCall_3_0(), currentNode); 
	    }
		lv_ownedSpecifications_3_0=ruleAbstractSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedSpecifications",
	        		lv_ownedSpecifications_3_0, 
	        		"AbstractSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'edon' 
    {
        createLeafNode(grammarAccess.getNodeAccess().getEdonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAbstractSpecification
entryRuleAbstractSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractSpecificationRule(), currentNode); }
	 iv_ruleAbstractSpecification=ruleAbstractSpecification 
	 { $current=$iv_ruleAbstractSpecification.current; } 
	 EOF 
;

// Rule AbstractSpecification
ruleAbstractSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getFlowSpecificationParserRuleCall_0(), currentNode); 
    }
    this_FlowSpecification_0=ruleFlowSpecification
    { 
        $current = $this_FlowSpecification_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getStateSpecificationParserRuleCall_1(), currentNode); 
    }
    this_StateSpecification_1=ruleStateSpecification
    { 
        $current = $this_StateSpecification_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getEventSpecificationParserRuleCall_2(), currentNode); 
    }
    this_EventSpecification_2=ruleEventSpecification
    { 
        $current = $this_EventSpecification_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getNodeInstanceSpecificationParserRuleCall_3(), currentNode); 
    }
    this_NodeInstanceSpecification_3=ruleNodeInstanceSpecification
    { 
        $current = $this_NodeInstanceSpecification_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getAssertSpecificationParserRuleCall_4(), currentNode); 
    }
    this_AssertSpecification_4=ruleAssertSpecification
    { 
        $current = $this_AssertSpecification_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getVectorSpecificationParserRuleCall_5(), currentNode); 
    }
    this_VectorSpecification_5=ruleVectorSpecification
    { 
        $current = $this_VectorSpecification_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getTransitionSpecificationParserRuleCall_6(), currentNode); 
    }
    this_TransitionSpecification_6=ruleTransitionSpecification
    { 
        $current = $this_TransitionSpecification_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getInitSpecificationParserRuleCall_7(), currentNode); 
    }
    this_InitSpecification_7=ruleInitSpecification
    { 
        $current = $this_InitSpecification_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractSpecificationAccess().getExternalSpecificationParserRuleCall_8(), currentNode); 
    }
    this_ExternalSpecification_8=ruleExternalSpecification
    { 
        $current = $this_ExternalSpecification_8.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleVariableAttribute
entryRuleVariableAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableAttributeRule(), currentNode); }
	 iv_ruleVariableAttribute=ruleVariableAttribute 
	 { $current=$iv_ruleVariableAttribute.current; } 
	 EOF 
;

// Rule VariableAttribute
ruleVariableAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableAttributeAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleInitSpecification
entryRuleInitSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitSpecificationRule(), currentNode); }
	 iv_ruleInitSpecification=ruleInitSpecification 
	 { $current=$iv_ruleInitSpecification.current; } 
	 EOF 
;

// Rule InitSpecification
ruleInitSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'init' 
    {
        createLeafNode(grammarAccess.getInitSpecificationAccess().getInitKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitSpecificationAccess().getOwnedInitStatementsInitStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedInitStatements_1_0=ruleInitStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedInitStatements",
	        		lv_ownedInitStatements_1_0, 
	        		"InitStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleInitStatement
entryRuleInitStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitStatementRule(), currentNode); }
	 iv_ruleInitStatement=ruleInitStatement 
	 { $current=$iv_ruleInitStatement.current; } 
	 EOF 
;

// Rule InitStatement
ruleInitStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitStatementAccess().getAffectationAffectationParserRuleCall_0_0(), currentNode); 
	    }
		lv_affectation_0_0=ruleAffectation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"affectation",
	        		lv_affectation_0_0, 
	        		"Affectation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getInitStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleExternalSpecification
entryRuleExternalSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExternalSpecificationRule(), currentNode); }
	 iv_ruleExternalSpecification=ruleExternalSpecification 
	 { $current=$iv_ruleExternalSpecification.current; } 
	 EOF 
;

// Rule ExternalSpecification
ruleExternalSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'extern' 
    {
        createLeafNode(grammarAccess.getExternalSpecificationAccess().getExternKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExternalSpecificationAccess().getOwnedDirectivesExternalDirectiveParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedDirectives_1_0=ruleExternalDirective		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternalSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedDirectives",
	        		lv_ownedDirectives_1_0, 
	        		"ExternalDirective", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleExternalDirective
entryRuleExternalDirective returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExternalDirectiveRule(), currentNode); }
	 iv_ruleExternalDirective=ruleExternalDirective 
	 { $current=$iv_ruleExternalDirective.current; } 
	 EOF 
;

// Rule ExternalDirective
ruleExternalDirective returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_directive_0_0=RULE_SL_COMMENT
		{
			createLeafNode(grammarAccess.getExternalDirectiveAccess().getDirectiveSL_COMMENTTerminalRuleCall_0(), "directive"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternalDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"directive",
	        		lv_directive_0_0, 
	        		"SL_COMMENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleFlowSpecification
entryRuleFlowSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFlowSpecificationRule(), currentNode); }
	 iv_ruleFlowSpecification=ruleFlowSpecification 
	 { $current=$iv_ruleFlowSpecification.current; } 
	 EOF 
;

// Rule FlowSpecification
ruleFlowSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'flow' 
    {
        createLeafNode(grammarAccess.getFlowSpecificationAccess().getFlowKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowSpecificationAccess().getOwnedDeclarationsFlowDeclarationParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedDeclarations_1_0=ruleFlowDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedDeclarations",
	        		lv_ownedDeclarations_1_0, 
	        		"FlowDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleFlowDeclaration
entryRuleFlowDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFlowDeclarationRule(), currentNode); }
	 iv_ruleFlowDeclaration=ruleFlowDeclaration 
	 { $current=$iv_ruleFlowDeclaration.current; } 
	 EOF 
;

// Rule FlowDeclaration
ruleFlowDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsFlowParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedFlows_0_0=ruleFlow		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedFlows",
	        		lv_ownedFlows_0_0, 
	        		"Flow", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFlowDeclarationAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowDeclarationAccess().getOwnedFlowsFlowParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedFlows_2_0=ruleFlow		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedFlows",
	        		lv_ownedFlows_2_0, 
	        		"Flow", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	':' 
    {
        createLeafNode(grammarAccess.getFlowDeclarationAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowDeclarationAccess().getDomainAbstractTypeRefParserRuleCall_3_0(), currentNode); 
	    }
		lv_domain_4_0=ruleAbstractTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"domain",
	        		lv_domain_4_0, 
	        		"AbstractTypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getFlowDeclarationAccess().getColonKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowDeclarationAccess().getKindFlowKindEnumRuleCall_4_1_0(), currentNode); 
	    }
		lv_kind_6_0=ruleFlowKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_6_0, 
	        		"FlowKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	':' 
    {
        createLeafNode(grammarAccess.getFlowDeclarationAccess().getColonKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowDeclarationAccess().getAttributeVariableAttributeParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_attribute_8_0=ruleVariableAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"attribute",
	        		lv_attribute_8_0, 
	        		"VariableAttribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getFlowDeclarationAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleFlow
entryRuleFlow returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFlowRule(), currentNode); }
	 iv_ruleFlow=ruleFlow 
	 { $current=$iv_ruleFlow.current; } 
	 EOF 
;

// Rule Flow
ruleFlow returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFlowAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleEventSpecification
entryRuleEventSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventSpecificationRule(), currentNode); }
	 iv_ruleEventSpecification=ruleEventSpecification 
	 { $current=$iv_ruleEventSpecification.current; } 
	 EOF 
;

// Rule EventSpecification
ruleEventSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'event' 
    {
        createLeafNode(grammarAccess.getEventSpecificationAccess().getEventKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventSpecificationAccess().getOwnedEventDeclarationsEventDeclarationParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedEventDeclarations_1_0=ruleEventDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEventDeclarations",
	        		lv_ownedEventDeclarations_1_0, 
	        		"EventDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleEventDeclaration
entryRuleEventDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventDeclarationRule(), currentNode); }
	 iv_ruleEventDeclaration=ruleEventDeclaration 
	 { $current=$iv_ruleEventDeclaration.current; } 
	 EOF 
;

// Rule EventDeclaration
ruleEventDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDeclarationAccess().getOwnedEventsEventParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedEvents_0_0=ruleEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEvents",
	        		lv_ownedEvents_0_0, 
	        		"Event", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getEventDeclarationAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDeclarationAccess().getOwnedEventsEventParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedEvents_2_0=ruleEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEvents",
	        		lv_ownedEvents_2_0, 
	        		"Event", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	':' 
    {
        createLeafNode(grammarAccess.getEventDeclarationAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDeclarationAccess().getAttributeVariableAttributeParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_attribute_4_0=ruleVariableAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"attribute",
	        		lv_attribute_4_0, 
	        		"VariableAttribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getEventDeclarationAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventRule(), currentNode); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getEventAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventAccess().getOwnedPriorityPriorityParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedPriority_2_0=rulePriority		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedPriority",
	        		lv_ownedPriority_2_0, 
	        		"Priority", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getEventAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPriorityRule(), currentNode); }
	 iv_rulePriority=rulePriority 
	 { $current=$iv_rulePriority.current; } 
	 EOF 
;

// Rule Priority
rulePriority returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'!' 
    {
        createLeafNode(grammarAccess.getPriorityAccess().getExclamationMarkKeyword_0_0(), null); 
    }

    |	'priority' 
    {
        createLeafNode(grammarAccess.getPriorityAccess().getPriorityKeyword_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPriorityAccess().getOwnedExpressionAbstractExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedExpression_2_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPriorityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_2_0, 
	        		"AbstractExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleStateSpecification
entryRuleStateSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateSpecificationRule(), currentNode); }
	 iv_ruleStateSpecification=ruleStateSpecification 
	 { $current=$iv_ruleStateSpecification.current; } 
	 EOF 
;

// Rule StateSpecification
ruleStateSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'state' 
    {
        createLeafNode(grammarAccess.getStateSpecificationAccess().getStateKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateSpecificationAccess().getOwnedStateDeclarationsStateDeclarationParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedStateDeclarations_1_0=ruleStateDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedStateDeclarations",
	        		lv_ownedStateDeclarations_1_0, 
	        		"StateDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleStateDeclaration
entryRuleStateDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateDeclarationRule(), currentNode); }
	 iv_ruleStateDeclaration=ruleStateDeclaration 
	 { $current=$iv_ruleStateDeclaration.current; } 
	 EOF 
;

// Rule StateDeclaration
ruleStateDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateDeclarationAccess().getOwnedStatesStateParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedStates_0_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedStates",
	        		lv_ownedStates_0_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getStateDeclarationAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateDeclarationAccess().getOwnedStatesStateParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedStates_2_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedStates",
	        		lv_ownedStates_2_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	':' 
    {
        createLeafNode(grammarAccess.getStateDeclarationAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateDeclarationAccess().getDomainAbstractTypeRefParserRuleCall_3_0(), currentNode); 
	    }
		lv_domain_4_0=ruleAbstractTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"domain",
	        		lv_domain_4_0, 
	        		"AbstractTypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getStateDeclarationAccess().getColonKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateDeclarationAccess().getAttributeVariableAttributeParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_attribute_6_0=ruleVariableAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"attribute",
	        		lv_attribute_6_0, 
	        		"VariableAttribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getStateDeclarationAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleAbstractTypeRef
entryRuleAbstractTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractTypeRefRule(), currentNode); }
	 iv_ruleAbstractTypeRef=ruleAbstractTypeRef 
	 { $current=$iv_ruleAbstractTypeRef.current; } 
	 EOF 
;

// Rule AbstractTypeRef
ruleAbstractTypeRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTypeRefAccess().getDomainRefParserRuleCall_0(), currentNode); 
    }
    this_DomainRef_0=ruleDomainRef
    { 
        $current = $this_DomainRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTypeRefAccess().getAbstractDomainParserRuleCall_1(), currentNode); 
    }
    this_AbstractDomain_1=ruleAbstractDomain
    { 
        $current = $this_AbstractDomain_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDomainRef
entryRuleDomainRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainRefRule(), currentNode); }
	 iv_ruleDomainRef=ruleDomainRef 
	 { $current=$iv_ruleDomainRef.current; } 
	 EOF 
;

// Rule DomainRef
ruleDomainRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDomainRefAccess().getReferenceDomainCrossReference_0(), "reference"); 
	}

)
)
;





// Entry rule entryRuleNodeInstanceSpecification
entryRuleNodeInstanceSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNodeInstanceSpecificationRule(), currentNode); }
	 iv_ruleNodeInstanceSpecification=ruleNodeInstanceSpecification 
	 { $current=$iv_ruleNodeInstanceSpecification.current; } 
	 EOF 
;

// Rule NodeInstanceSpecification
ruleNodeInstanceSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'sub' 
    {
        createLeafNode(grammarAccess.getNodeInstanceSpecificationAccess().getSubKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNodeInstanceSpecificationAccess().getOwnedNodeInstanceDeclarationsNodeInstanceDeclarationParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedNodeInstanceDeclarations_1_0=ruleNodeInstanceDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeInstanceSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedNodeInstanceDeclarations",
	        		lv_ownedNodeInstanceDeclarations_1_0, 
	        		"NodeInstanceDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleNodeInstanceDeclaration
entryRuleNodeInstanceDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNodeInstanceDeclarationRule(), currentNode); }
	 iv_ruleNodeInstanceDeclaration=ruleNodeInstanceDeclaration 
	 { $current=$iv_ruleNodeInstanceDeclaration.current; } 
	 EOF 
;

// Rule NodeInstanceDeclaration
ruleNodeInstanceDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesNodeInstanceParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedNodeInstances_0_0=ruleNodeInstance		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeInstanceDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedNodeInstances",
	        		lv_ownedNodeInstances_0_0, 
	        		"NodeInstance", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getNodeInstanceDeclarationAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNodeInstanceDeclarationAccess().getOwnedNodeInstancesNodeInstanceParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedNodeInstances_2_0=ruleNodeInstance		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeInstanceDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedNodeInstances",
	        		lv_ownedNodeInstances_2_0, 
	        		"NodeInstance", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	':' 
    {
        createLeafNode(grammarAccess.getNodeInstanceDeclarationAccess().getColonKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeInstanceDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNodeInstanceDeclarationAccess().getNodeTypeNodeCrossReference_3_0(), "nodeType"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getNodeInstanceDeclarationAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleNodeInstance
entryRuleNodeInstance returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNodeInstanceRule(), currentNode); }
	 iv_ruleNodeInstance=ruleNodeInstance 
	 { $current=$iv_ruleNodeInstance.current; } 
	 EOF 
;

// Rule NodeInstance
ruleNodeInstance returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNodeInstanceAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleAssertSpecification
entryRuleAssertSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssertSpecificationRule(), currentNode); }
	 iv_ruleAssertSpecification=ruleAssertSpecification 
	 { $current=$iv_ruleAssertSpecification.current; } 
	 EOF 
;

// Rule AssertSpecification
ruleAssertSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'assert' 
    {
        createLeafNode(grammarAccess.getAssertSpecificationAccess().getAssertKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssertSpecificationAccess().getOwnedAssertsAssertParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedAsserts_1_0=ruleAssert		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAsserts",
	        		lv_ownedAsserts_1_0, 
	        		"Assert", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleAssert
entryRuleAssert returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssertRule(), currentNode); }
	 iv_ruleAssert=ruleAssert 
	 { $current=$iv_ruleAssert.current; } 
	 EOF 
;

// Rule Assert
ruleAssert returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssertAccess().getOwnedExpressionsAbstractBooleanExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedExpressions_0_0=ruleAbstractBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedExpressions",
	        		lv_ownedExpressions_0_0, 
	        		"AbstractBooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getAssertAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleVectorSpecification
entryRuleVectorSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVectorSpecificationRule(), currentNode); }
	 iv_ruleVectorSpecification=ruleVectorSpecification 
	 { $current=$iv_ruleVectorSpecification.current; } 
	 EOF 
;

// Rule VectorSpecification
ruleVectorSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'sync' 
    {
        createLeafNode(grammarAccess.getVectorSpecificationAccess().getSyncKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVectorSpecificationAccess().getOwnedVectorsVectorParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedVectors_1_0=ruleVector		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedVectors",
	        		lv_ownedVectors_1_0, 
	        		"Vector", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVectorRule(), currentNode); }
	 iv_ruleVector=ruleVector 
	 { $current=$iv_ruleVector.current; } 
	 EOF 
;

// Rule Vector
ruleVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'<' 
    {
        createLeafNode(grammarAccess.getVectorAccess().getLessThanSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedParameters_1_0=ruleVectorParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParameters",
	        		lv_ownedParameters_1_0, 
	        		"VectorParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getVectorAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_ownedParameters_3_0=ruleVectorParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParameters",
	        		lv_ownedParameters_3_0, 
	        		"VectorParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getVectorAccess().getGreaterThanSignKeyword_3(), null); 
    }
(	'[' 
    {
        createLeafNode(grammarAccess.getVectorAccess().getLeftSquareBracketKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVectorAccess().getCardinalityCardinalityParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_cardinality_6_0=ruleCardinality		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cardinality",
	        		lv_cardinality_6_0, 
	        		"Cardinality", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getVectorAccess().getRightSquareBracketKeyword_4_2(), null); 
    }
)?	';' 
    {
        createLeafNode(grammarAccess.getVectorAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleVectorParameter
entryRuleVectorParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVectorParameterRule(), currentNode); }
	 iv_ruleVectorParameter=ruleVectorParameter 
	 { $current=$iv_ruleVectorParameter.current; } 
	 EOF 
;

// Rule VectorParameter
ruleVectorParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVectorParameterAccess().getEventParameterEventRefParserRuleCall_0_0(), currentNode); 
	    }
		lv_eventParameter_0_0=ruleEventRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"eventParameter",
	        		lv_eventParameter_0_0, 
	        		"EventRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_isRequired_1_0=	'?' 
    {
        createLeafNode(grammarAccess.getVectorParameterAccess().getIsRequiredQuestionMarkKeyword_1_0(), "isRequired"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isRequired", true, "?", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCardinalityRule(), currentNode); }
	 iv_ruleCardinality=ruleCardinality 
	 { $current=$iv_ruleCardinality.current; } 
	 EOF 
;

// Rule Cardinality
ruleCardinality returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'>' 
    {
        createLeafNode(grammarAccess.getCardinalityAccess().getGreaterThanSignKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCardinalityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"AbstractExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'>=' 
    {
        createLeafNode(grammarAccess.getCardinalityAccess().getGreaterThanSignEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression_3_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCardinalityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"AbstractExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'=' 
    {
        createLeafNode(grammarAccess.getCardinalityAccess().getEqualsSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_expression_5_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCardinalityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_5_0, 
	        		"AbstractExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleTransitionSpecification
entryRuleTransitionSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionSpecificationRule(), currentNode); }
	 iv_ruleTransitionSpecification=ruleTransitionSpecification 
	 { $current=$iv_ruleTransitionSpecification.current; } 
	 EOF 
;

// Rule TransitionSpecification
ruleTransitionSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'trans' 
    {
        createLeafNode(grammarAccess.getTransitionSpecificationAccess().getTransKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionSpecificationAccess().getOwnedTransitionTransitionsTransitionParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedTransitionTransitions_1_0=ruleTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedTransitionTransitions",
	        		lv_ownedTransitionTransitions_1_0, 
	        		"Transition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRule(), currentNode); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getOwnedExpresionAbstractExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedExpresion_0_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpresion",
	        		lv_ownedExpresion_0_0, 
	        		"AbstractExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'|-' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getVerticalLineHyphenMinusKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTransitionAccess().getEventEventCrossReference_2_0(), "event"); 
	}

)
)	'->' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getOwnedAffectationsAffectationParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_ownedAffectations_4_0=ruleAffectation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAffectations",
	        		lv_ownedAffectations_4_0, 
	        		"Affectation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getCommaKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getOwnedAffectationsAffectationParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_ownedAffectations_6_0=ruleAffectation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAffectations",
	        		lv_ownedAffectations_6_0, 
	        		"Affectation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)*	';' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleAffectation
entryRuleAffectation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAffectationRule(), currentNode); }
	 iv_ruleAffectation=ruleAffectation 
	 { $current=$iv_ruleAffectation.current; } 
	 EOF 
;

// Rule Affectation
ruleAffectation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAffectationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAffectationAccess().getStateStateCrossReference_0_0(), "state"); 
	}

)
)	':=' 
    {
        createLeafNode(grammarAccess.getAffectationAccess().getColonEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAffectationAccess().getOwnedExpressionAbstractExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_ownedExpression_2_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAffectationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_2_0, 
	        		"AbstractExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAbstractExpression
entryRuleAbstractExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractExpressionRule(), currentNode); }
	 iv_ruleAbstractExpression=ruleAbstractExpression 
	 { $current=$iv_ruleAbstractExpression.current; } 
	 EOF 
;

// Rule AbstractExpression
ruleAbstractExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractExpressionAccess().getIfThenElseParserRuleCall_0(), currentNode); 
    }
    this_IfThenElse_0=ruleIfThenElse
    { 
        $current = $this_IfThenElse_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractExpressionAccess().getSwitchParserRuleCall_1(), currentNode); 
    }
    this_Switch_1=ruleSwitch
    { 
        $current = $this_Switch_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractExpressionAccess().getExpressionParserRuleCall_2(), currentNode); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAbstractBooleanExpression
entryRuleAbstractBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractBooleanExpressionRule(), currentNode); }
	 iv_ruleAbstractBooleanExpression=ruleAbstractBooleanExpression 
	 { $current=$iv_ruleAbstractBooleanExpression.current; } 
	 EOF 
;

// Rule AbstractBooleanExpression
ruleAbstractBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractBooleanExpressionAccess().getIfThenElseParserRuleCall_0(), currentNode); 
    }
    this_IfThenElse_0=ruleIfThenElse
    { 
        $current = $this_IfThenElse_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractBooleanExpressionAccess().getSwitchParserRuleCall_1(), currentNode); 
    }
    this_Switch_1=ruleSwitch
    { 
        $current = $this_Switch_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractBooleanExpressionAccess().getBooleanExpressionParserRuleCall_2(), currentNode); 
    }
    this_BooleanExpression_2=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSwitchRule(), currentNode); }
	 iv_ruleSwitch=ruleSwitch 
	 { $current=$iv_ruleSwitch.current; } 
	 EOF 
;

// Rule Switch
ruleSwitch returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'case {' 
    {
        createLeafNode(grammarAccess.getSwitchAccess().getCaseKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchAccess().getOwnedCasesCaseExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedCases_1_0=ruleCaseExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedCases",
	        		lv_ownedCases_1_0, 
	        		"CaseExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'else' 
    {
        createLeafNode(grammarAccess.getSwitchAccess().getElseKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchAccess().getDefaultExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_default_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"default",
	        		lv_default_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCaseExpressionRule(), currentNode); }
	 iv_ruleCaseExpression=ruleCaseExpression 
	 { $current=$iv_ruleCaseExpression.current; } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getConditionBooleanExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_condition_0_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_0_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getCaseExpressionAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getBodyExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_body_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getCaseExpressionAccess().getCommaKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfThenElseRule(), currentNode); }
	 iv_ruleIfThenElse=ruleIfThenElse 
	 { $current=$iv_ruleIfThenElse.current; } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfThenElseAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseAccess().getConditionBooleanExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIfThenElseAccess().getThenKeyword_2(), null); 
    }
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseAccess().getThenSwitchParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_then_3_1=ruleSwitch		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"then",
	        		lv_then_3_1, 
	        		"Switch", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseAccess().getThenExpressionParserRuleCall_3_0_1(), currentNode); 
	    }
		lv_then_3_2=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"then",
	        		lv_then_3_2, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)	'else' 
    {
        createLeafNode(grammarAccess.getIfThenElseAccess().getElseKeyword_4(), null); 
    }
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseAccess().getElseSwitchParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_else_5_1=ruleSwitch		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"else",
	        		lv_else_5_1, 
	        		"Switch", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseAccess().getElseExpressionParserRuleCall_5_0_1(), currentNode); 
	    }
		lv_else_5_2=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"else",
	        		lv_else_5_2, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getMinusParserRuleCall_0(), currentNode); 
    }
    this_Minus_0=ruleMinus
    { 
        $current = $this_Minus_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getExpressionAccess().getAdditionLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionAccess().getAdditionLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'+' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getPlusSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getRightOperandMinusParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleMinus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"Minus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMinus
entryRuleMinus returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMinusRule(), currentNode); }
	 iv_ruleMinus=ruleMinus 
	 { $current=$iv_ruleMinus.current; } 
	 EOF 
;

// Rule Minus
ruleMinus returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMinusAccess().getMultiplicationParserRuleCall_0(), currentNode); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMinusAccess().getMinusLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMinusAccess().getMinusLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'-' 
    {
        createLeafNode(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMinusAccess().getRightOperandMultiplicationParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"Multiplication", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicationRule(), currentNode); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0(), currentNode); 
    }
    this_Division_0=ruleDivision
    { 
        $current = $this_Division_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMultiplicationAccess().getMultiplicationLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicationAccess().getMultiplicationLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicationAccess().getRightOperandDivisionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleDivision		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"Division", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDivisionRule(), currentNode); }
	 iv_ruleDivision=ruleDivision 
	 { $current=$iv_ruleDivision.current; } 
	 EOF 
;

// Rule Division
ruleDivision returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDivisionAccess().getBooleanExpressionParserRuleCall_0(), currentNode); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getDivisionAccess().getDivisionLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDivisionAccess().getDivisionLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'/' 
    {
        createLeafNode(grammarAccess.getDivisionAccess().getSolidusKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDivisionAccess().getRightOperandBooleanExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDivisionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getAndParserRuleCall(), currentNode); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndRule(), currentNode); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndAccess().getOrParserRuleCall_0(), currentNode); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndAccess().getAndLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndAccess().getAndLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'and' 
    {
        createLeafNode(grammarAccess.getAndAccess().getAndKeyword_1_1_0(), null); 
    }

    |	'&' 
    {
        createLeafNode(grammarAccess.getAndAccess().getAmpersandKeyword_1_1_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndAccess().getRightOperandOrParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_4_0=ruleOr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_4_0, 
	        		"Or", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrRule(), currentNode); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOrAccess().getEqualParserRuleCall_0(), currentNode); 
    }
    this_Equal_0=ruleEqual
    { 
        $current = $this_Equal_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOrAccess().getOrLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrAccess().getOrLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'or' 
    {
        createLeafNode(grammarAccess.getOrAccess().getOrKeyword_1_1_0(), null); 
    }

    |	'|' 
    {
        createLeafNode(grammarAccess.getOrAccess().getVerticalLineKeyword_1_1_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrAccess().getRightOperandEqualParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_4_0=ruleEqual		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_4_0, 
	        		"Equal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualRule(), currentNode); }
	 iv_ruleEqual=ruleEqual 
	 { $current=$iv_ruleEqual.current; } 
	 EOF 
;

// Rule Equal
ruleEqual returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEqualAccess().getNotEqualParserRuleCall_0(), currentNode); 
    }
    this_NotEqual_0=ruleNotEqual
    { 
        $current = $this_NotEqual_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getEqualAccess().getEqualLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEqualAccess().getEqualLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'=' 
    {
        createLeafNode(grammarAccess.getEqualAccess().getEqualsSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualAccess().getRightOperandNotEqualParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleNotEqual		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"NotEqual", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNotEqual
entryRuleNotEqual returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotEqualRule(), currentNode); }
	 iv_ruleNotEqual=ruleNotEqual 
	 { $current=$iv_ruleNotEqual.current; } 
	 EOF 
;

// Rule NotEqual
ruleNotEqual returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNotEqualAccess().getStrictLowerParserRuleCall_0(), currentNode); 
    }
    this_StrictLower_0=ruleStrictLower
    { 
        $current = $this_StrictLower_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getNotEqualAccess().getNotEqualLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNotEqualAccess().getNotEqualLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'!=' 
    {
        createLeafNode(grammarAccess.getNotEqualAccess().getExclamationMarkEqualsSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNotEqualAccess().getRightOperandStrictLowerParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleStrictLower		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotEqualRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"StrictLower", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleStrictLower
entryRuleStrictLower returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStrictLowerRule(), currentNode); }
	 iv_ruleStrictLower=ruleStrictLower 
	 { $current=$iv_ruleStrictLower.current; } 
	 EOF 
;

// Rule StrictLower
ruleStrictLower returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStrictLowerAccess().getLowerParserRuleCall_0(), currentNode); 
    }
    this_Lower_0=ruleLower
    { 
        $current = $this_Lower_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getStrictLowerAccess().getStrictLowerLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStrictLowerAccess().getStrictLowerLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'<' 
    {
        createLeafNode(grammarAccess.getStrictLowerAccess().getLessThanSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStrictLowerAccess().getRightOperandLowerParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleLower		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStrictLowerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"Lower", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleLower
entryRuleLower returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLowerRule(), currentNode); }
	 iv_ruleLower=ruleLower 
	 { $current=$iv_ruleLower.current; } 
	 EOF 
;

// Rule Lower
ruleLower returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLowerAccess().getStrictUpperParserRuleCall_0(), currentNode); 
    }
    this_StrictUpper_0=ruleStrictUpper
    { 
        $current = $this_StrictUpper_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getLowerAccess().getLowerLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLowerAccess().getLowerLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'<=' 
    {
        createLeafNode(grammarAccess.getLowerAccess().getLessThanSignEqualsSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLowerAccess().getRightOperandStrictUpperParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleStrictUpper		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLowerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"StrictUpper", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleStrictUpper
entryRuleStrictUpper returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStrictUpperRule(), currentNode); }
	 iv_ruleStrictUpper=ruleStrictUpper 
	 { $current=$iv_ruleStrictUpper.current; } 
	 EOF 
;

// Rule StrictUpper
ruleStrictUpper returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStrictUpperAccess().getUpperParserRuleCall_0(), currentNode); 
    }
    this_Upper_0=ruleUpper
    { 
        $current = $this_Upper_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getStrictUpperAccess().getStrictUpperLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStrictUpperAccess().getStrictUpperLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'>' 
    {
        createLeafNode(grammarAccess.getStrictUpperAccess().getGreaterThanSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStrictUpperAccess().getRightOperandUpperParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleUpper		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStrictUpperRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"Upper", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleUpper
entryRuleUpper returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUpperRule(), currentNode); }
	 iv_ruleUpper=ruleUpper 
	 { $current=$iv_ruleUpper.current; } 
	 EOF 
;

// Rule Upper
ruleUpper returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUpperAccess().getImplyParserRuleCall_0(), currentNode); 
    }
    this_Imply_0=ruleImply
    { 
        $current = $this_Imply_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getUpperAccess().getUpperLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUpperAccess().getUpperLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'>=' 
    {
        createLeafNode(grammarAccess.getUpperAccess().getGreaterThanSignEqualsSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpperAccess().getRightOperandImplyParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleImply		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpperRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"Imply", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleImply
entryRuleImply returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImplyRule(), currentNode); }
	 iv_ruleImply=ruleImply 
	 { $current=$iv_ruleImply.current; } 
	 EOF 
;

// Rule Imply
ruleImply returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getImplyAccess().getNotParserRuleCall_0(), currentNode); 
    }
    this_Not_0=ruleNot
    { 
        $current = $this_Not_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getImplyAccess().getImplyLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getImplyAccess().getImplyLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'=>' 
    {
        createLeafNode(grammarAccess.getImplyAccess().getEqualsSignGreaterThanSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImplyAccess().getRightOperandNotParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleNot		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImplyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"Not", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotRule(), currentNode); }
	 iv_ruleNot=ruleNot 
	 { $current=$iv_ruleNot.current; } 
	 EOF 
;

// Rule Not
ruleNot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	'~' 
    {
        createLeafNode(grammarAccess.getNotAccess().getTildeKeyword_0_0_0(), null); 
    }

    |	'not' 
    {
        createLeafNode(grammarAccess.getNotAccess().getNotKeyword_0_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNotAccess().getOperandAtomParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_operand_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operand",
	        		lv_operand_2_0, 
	        		"Atom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNotAccess().getAtomParserRuleCall_1(), currentNode); 
    }
    this_Atom_3=ruleAtom
    { 
        $current = $this_Atom_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getBooleanLiteralParserRuleCall_0(), currentNode); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_1(), currentNode); 
    }
    this_StringLiteral_1=ruleStringLiteral
    { 
        $current = $this_StringLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getIntegerLiteralParserRuleCall_2(), currentNode); 
    }
    this_IntegerLiteral_2=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getVariableRefParserRuleCall_3(), currentNode); 
    }
    this_VariableRef_3=ruleVariableRef
    { 
        $current = $this_VariableRef_3.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getExpressionParserRuleCall_4_1(), currentNode); 
    }
    this_Expression_5=ruleExpression
    { 
        $current = $this_Expression_5.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_2(), null); 
    }
))
;





// Entry rule entryRuleEventRef
entryRuleEventRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventRefRule(), currentNode); }
	 iv_ruleEventRef=ruleEventRef 
	 { $current=$iv_ruleEventRef.current; } 
	 EOF 
;

// Rule EventRef
ruleEventRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEventRefAccess().getVariableNavigableVariableCrossReference_0_0(), "variable"); 
	}

)
)((
    { 
        temp=factory.create(grammarAccess.getEventRefAccess().getNestedQualifiedEventRefTargetAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEventRefAccess().getNestedQualifiedEventRefTargetAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getEventRefAccess().getFullStopKeyword_1_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEventRefAccess().getNestedVariableNavigableVariableCrossReference_1_2_0(), "nestedVariable"); 
	}

)
))*)
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRefRule(), currentNode); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableRefAccess().getVariableNavigableVariableCrossReference_0_0(), "variable"); 
	}

)
)((
    { 
        temp=factory.create(grammarAccess.getVariableRefAccess().getNestedQualifiedVariableRefTargetAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableRefAccess().getNestedQualifiedVariableRefTargetAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getVariableRefAccess().getFullStopKeyword_1_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableRefAccess().getNestedVariableNavigableVariableCrossReference_1_2_0(), "nestedVariable"); 
	}

)
))*)
;







// Entry rule entryRuleNonNavigableVariable
entryRuleNonNavigableVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonNavigableVariableRule(), currentNode); }
	 iv_ruleNonNavigableVariable=ruleNonNavigableVariable 
	 { $current=$iv_ruleNonNavigableVariable.current; } 
	 EOF 
;

// Rule NonNavigableVariable
ruleNonNavigableVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNonNavigableVariableAccess().getStateParserRuleCall_0(), currentNode); 
    }
    this_State_0=ruleState
    { 
        $current = $this_State_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonNavigableVariableAccess().getLiteralParserRuleCall_1(), currentNode); 
    }
    this_Literal_1=ruleLiteral
    { 
        $current = $this_Literal_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonNavigableVariableAccess().getConstantParserRuleCall_2(), currentNode); 
    }
    this_Constant_2=ruleConstant
    { 
        $current = $this_Constant_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonNavigableVariableAccess().getFlowParserRuleCall_3(), currentNode); 
    }
    this_Flow_3=ruleFlow
    { 
        $current = $this_Flow_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		lv_value_0_1=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_0_2=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralRule(), currentNode); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Rule PrimitiveTypeKind
rulePrimitiveTypeKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'integer' 
	{
        $current = grammarAccess.getPrimitiveTypeKindAccess().getINTEGEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPrimitiveTypeKindAccess().getINTEGEREnumLiteralDeclaration_0(), null); 
    }
)
    |(	'bool' 
	{
        $current = grammarAccess.getPrimitiveTypeKindAccess().getBOOLEANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPrimitiveTypeKindAccess().getBOOLEANEnumLiteralDeclaration_1(), null); 
    }
));



// Rule FlowKind
ruleFlowKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'in' 
	{
        $current = grammarAccess.getFlowKindAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getFlowKindAccess().getINEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'out' 
	{
        $current = grammarAccess.getFlowKindAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getFlowKindAccess().getOUTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'inout' 
	{
        $current = grammarAccess.getFlowKindAccess().getINOUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getFlowKindAccess().getINOUTEnumLiteralDeclaration_2(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


