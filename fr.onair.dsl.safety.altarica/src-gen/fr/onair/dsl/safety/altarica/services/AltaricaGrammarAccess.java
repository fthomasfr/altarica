/*
* generated by Xtext
*/

package fr.onair.dsl.safety.altarica.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AltaricaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Assignment cOwnedDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedDeclarationsAbstractDeclarationParserRuleCall_0 = (RuleCall)cOwnedDeclarationsAssignment.eContents().get(0);
		
		//System:
		//	ownedDeclarations+=AbstractDeclaration*;
		public ParserRule getRule() { return rule; }

		//ownedDeclarations+=AbstractDeclaration*
		public Assignment getOwnedDeclarationsAssignment() { return cOwnedDeclarationsAssignment; }

		//AbstractDeclaration
		public RuleCall getOwnedDeclarationsAbstractDeclarationParserRuleCall_0() { return cOwnedDeclarationsAbstractDeclarationParserRuleCall_0; }
	}

	public class AbstractDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractDeclaration:
		//	Domain | ConstantDefinition | Node;
		public ParserRule getRule() { return rule; }

		//Domain | ConstantDefinition | Node
		public Alternatives getAlternatives() { return cAlternatives; }

		//Domain
		public RuleCall getDomainParserRuleCall_0() { return cDomainParserRuleCall_0; }

		//ConstantDefinition
		public RuleCall getConstantDefinitionParserRuleCall_1() { return cConstantDefinitionParserRuleCall_1; }

		//Node
		public RuleCall getNodeParserRuleCall_2() { return cNodeParserRuleCall_2; }
	}

	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionAbstractDefinitionConstantParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstantDefinition:
		//	"const" constant=Constant expression=AbstractDefinitionConstant ";";
		public ParserRule getRule() { return rule; }

		//"const" constant=Constant expression=AbstractDefinitionConstant ";"
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//constant=Constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }

		//expression=AbstractDefinitionConstant
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//AbstractDefinitionConstant
		public RuleCall getExpressionAbstractDefinitionConstantParserRuleCall_2_0() { return cExpressionAbstractDefinitionConstantParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Constant:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AbstractDefinitionConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDefinitionConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDefinitionConstant:
		//	ExpressionConstant | DomainConstant;
		public ParserRule getRule() { return rule; }

		//ExpressionConstant | DomainConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionConstant
		public RuleCall getExpressionConstantParserRuleCall_0() { return cExpressionConstantParserRuleCall_0; }

		//DomainConstant
		public RuleCall getDomainConstantParserRuleCall_1() { return cDomainConstantParserRuleCall_1; }
	}

	public class ExpressionConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedExpressionExpressionParserRuleCall_1_0 = (RuleCall)cOwnedExpressionAssignment_1.eContents().get(0);
		
		//ExpressionConstant:
		//	"=" ownedExpression=Expression;
		public ParserRule getRule() { return rule; }

		//"=" ownedExpression=Expression
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//ownedExpression=Expression
		public Assignment getOwnedExpressionAssignment_1() { return cOwnedExpressionAssignment_1; }

		//Expression
		public RuleCall getOwnedExpressionExpressionParserRuleCall_1_0() { return cOwnedExpressionExpressionParserRuleCall_1_0; }
	}

	public class DomainConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDomainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomainAbstractDomainParserRuleCall_1_0 = (RuleCall)cDomainAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cOwnedExpressionAssignment_2_1.eContents().get(0);
		
		//DomainConstant:
		//	":" domain=AbstractDomain ("=" ownedExpression=Expression)?;
		public ParserRule getRule() { return rule; }

		//":" domain=AbstractDomain ("=" ownedExpression=Expression)?
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//domain=AbstractDomain
		public Assignment getDomainAssignment_1() { return cDomainAssignment_1; }

		//AbstractDomain
		public RuleCall getDomainAbstractDomainParserRuleCall_1_0() { return cDomainAbstractDomainParserRuleCall_1_0; }

		//("=" ownedExpression=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//ownedExpression=Expression
		public Assignment getOwnedExpressionAssignment_2_1() { return cOwnedExpressionAssignment_2_1; }

		//Expression
		public RuleCall getOwnedExpressionExpressionParserRuleCall_2_1_0() { return cOwnedExpressionExpressionParserRuleCall_2_1_0; }
	}

	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainAbstractDomainParserRuleCall_3_0 = (RuleCall)cDomainAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Domain:
		//	"domain" name=ID "=" domain=AbstractDomain ";";
		public ParserRule getRule() { return rule; }

		//"domain" name=ID "=" domain=AbstractDomain ";"
		public Group getGroup() { return cGroup; }

		//"domain"
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//domain=AbstractDomain
		public Assignment getDomainAssignment_3() { return cDomainAssignment_3; }

		//AbstractDomain
		public RuleCall getDomainAbstractDomainParserRuleCall_3_0() { return cDomainAbstractDomainParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AbstractDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDomain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractDomain:
		//	PrimitiveType | Range | Enumeration;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | Range | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//Range
		public RuleCall getRangeParserRuleCall_1() { return cRangeParserRuleCall_1; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerAtomParserRuleCall_1_0 = (RuleCall)cLowerAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperAtomParserRuleCall_3_0 = (RuleCall)cUpperAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Range:
		//	"[" lower=Atom "," upper=Atom "]";
		public ParserRule getRule() { return rule; }

		//"[" lower=Atom "," upper=Atom "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lower=Atom
		public Assignment getLowerAssignment_1() { return cLowerAssignment_1; }

		//Atom
		public RuleCall getLowerAtomParserRuleCall_1_0() { return cLowerAtomParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upper=Atom
		public Assignment getUpperAssignment_3() { return cUpperAssignment_3; }

		//Atom
		public RuleCall getUpperAtomParserRuleCall_3_0() { return cUpperAtomParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedLiteralsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedLiteralsLiteralParserRuleCall_1_0 = (RuleCall)cOwnedLiteralsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedLiteralsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedLiteralsLiteralParserRuleCall_2_1_0 = (RuleCall)cOwnedLiteralsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Enumeration:
		//	"{" ownedLiterals+=Literal ("," ownedLiterals+=Literal)* "}";
		public ParserRule getRule() { return rule; }

		//"{" ownedLiterals+=Literal ("," ownedLiterals+=Literal)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//ownedLiterals+=Literal
		public Assignment getOwnedLiteralsAssignment_1() { return cOwnedLiteralsAssignment_1; }

		//Literal
		public RuleCall getOwnedLiteralsLiteralParserRuleCall_1_0() { return cOwnedLiteralsLiteralParserRuleCall_1_0; }

		//("," ownedLiterals+=Literal)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//ownedLiterals+=Literal
		public Assignment getOwnedLiteralsAssignment_2_1() { return cOwnedLiteralsAssignment_2_1; }

		//Literal
		public RuleCall getOwnedLiteralsLiteralParserRuleCall_2_1_0() { return cOwnedLiteralsLiteralParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrimitiveTypeKindEnumRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PrimitiveType:
		//	name=PrimitiveTypeKind;
		public ParserRule getRule() { return rule; }

		//name=PrimitiveTypeKind
		public Assignment getNameAssignment() { return cNameAssignment; }

		//PrimitiveTypeKind
		public RuleCall getNamePrimitiveTypeKindEnumRuleCall_0() { return cNamePrimitiveTypeKindEnumRuleCall_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Literal:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMainMainKeyword_1_0 = (Keyword)cIsMainAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cOwnedSpecificationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedSpecificationsAbstractSpecificationParserRuleCall_3_0 = (RuleCall)cOwnedSpecificationsAssignment_3.eContents().get(0);
		private final Keyword cEdonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Node:
		//	"node" isMain?="Main"? name=ID ownedSpecifications+=AbstractSpecification* "edon";
		public ParserRule getRule() { return rule; }

		//"node" isMain?="Main"? name=ID ownedSpecifications+=AbstractSpecification* "edon"
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//isMain?="Main"?
		public Assignment getIsMainAssignment_1() { return cIsMainAssignment_1; }

		//"Main"
		public Keyword getIsMainMainKeyword_1_0() { return cIsMainMainKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//ownedSpecifications+=AbstractSpecification*
		public Assignment getOwnedSpecificationsAssignment_3() { return cOwnedSpecificationsAssignment_3; }

		//AbstractSpecification
		public RuleCall getOwnedSpecificationsAbstractSpecificationParserRuleCall_3_0() { return cOwnedSpecificationsAbstractSpecificationParserRuleCall_3_0; }

		//"edon"
		public Keyword getEdonKeyword_4() { return cEdonKeyword_4; }
	}

	public class AbstractSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFlowSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventSpecificationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNodeInstanceSpecificationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssertSpecificationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVectorSpecificationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTransitionSpecificationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInitSpecificationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExternalSpecificationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AbstractSpecification:
		//	FlowSpecification | StateSpecification | EventSpecification | NodeInstanceSpecification | AssertSpecification |
		//	VectorSpecification | TransitionSpecification | InitSpecification | ExternalSpecification;
		public ParserRule getRule() { return rule; }

		//FlowSpecification | StateSpecification | EventSpecification | NodeInstanceSpecification | AssertSpecification |
		//VectorSpecification | TransitionSpecification | InitSpecification | ExternalSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//FlowSpecification
		public RuleCall getFlowSpecificationParserRuleCall_0() { return cFlowSpecificationParserRuleCall_0; }

		//StateSpecification
		public RuleCall getStateSpecificationParserRuleCall_1() { return cStateSpecificationParserRuleCall_1; }

		//EventSpecification
		public RuleCall getEventSpecificationParserRuleCall_2() { return cEventSpecificationParserRuleCall_2; }

		//NodeInstanceSpecification
		public RuleCall getNodeInstanceSpecificationParserRuleCall_3() { return cNodeInstanceSpecificationParserRuleCall_3; }

		//AssertSpecification
		public RuleCall getAssertSpecificationParserRuleCall_4() { return cAssertSpecificationParserRuleCall_4; }

		//VectorSpecification
		public RuleCall getVectorSpecificationParserRuleCall_5() { return cVectorSpecificationParserRuleCall_5; }

		//TransitionSpecification
		public RuleCall getTransitionSpecificationParserRuleCall_6() { return cTransitionSpecificationParserRuleCall_6; }

		//InitSpecification
		public RuleCall getInitSpecificationParserRuleCall_7() { return cInitSpecificationParserRuleCall_7; }

		//ExternalSpecification
		public RuleCall getExternalSpecificationParserRuleCall_8() { return cExternalSpecificationParserRuleCall_8; }
	}

	public class VariableAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAttribute");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableAttribute:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class InitSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedInitStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedInitStatementsInitStatementParserRuleCall_1_0 = (RuleCall)cOwnedInitStatementsAssignment_1.eContents().get(0);
		
		//InitSpecification:
		//	"init" ownedInitStatements+=InitStatement*;
		public ParserRule getRule() { return rule; }

		//"init" ownedInitStatements+=InitStatement*
		public Group getGroup() { return cGroup; }

		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }

		//ownedInitStatements+=InitStatement*
		public Assignment getOwnedInitStatementsAssignment_1() { return cOwnedInitStatementsAssignment_1; }

		//InitStatement
		public RuleCall getOwnedInitStatementsInitStatementParserRuleCall_1_0() { return cOwnedInitStatementsInitStatementParserRuleCall_1_0; }
	}

	public class InitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAffectationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAffectationAffectationParserRuleCall_0_0 = (RuleCall)cAffectationAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InitStatement:
		//	affectation=Affectation ";";
		public ParserRule getRule() { return rule; }

		//affectation=Affectation ";"
		public Group getGroup() { return cGroup; }

		//affectation=Affectation
		public Assignment getAffectationAssignment_0() { return cAffectationAssignment_0; }

		//Affectation
		public RuleCall getAffectationAffectationParserRuleCall_0_0() { return cAffectationAffectationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ExternalSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedDirectivesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedDirectivesExternalDirectiveParserRuleCall_1_0 = (RuleCall)cOwnedDirectivesAssignment_1.eContents().get(0);
		
		//ExternalSpecification:
		//	"extern" ownedDirectives+=ExternalDirective*;
		public ParserRule getRule() { return rule; }

		//"extern" ownedDirectives+=ExternalDirective*
		public Group getGroup() { return cGroup; }

		//"extern"
		public Keyword getExternKeyword_0() { return cExternKeyword_0; }

		//ownedDirectives+=ExternalDirective*
		public Assignment getOwnedDirectivesAssignment_1() { return cOwnedDirectivesAssignment_1; }

		//ExternalDirective
		public RuleCall getOwnedDirectivesExternalDirectiveParserRuleCall_1_0() { return cOwnedDirectivesExternalDirectiveParserRuleCall_1_0; }
	}

	public class ExternalDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalDirective");
		private final Assignment cDirectiveAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDirectiveSL_COMMENTTerminalRuleCall_0 = (RuleCall)cDirectiveAssignment.eContents().get(0);
		
		//ExternalDirective:
		//	directive=SL_COMMENT;
		public ParserRule getRule() { return rule; }

		//directive=SL_COMMENT
		public Assignment getDirectiveAssignment() { return cDirectiveAssignment; }

		//SL_COMMENT
		public RuleCall getDirectiveSL_COMMENTTerminalRuleCall_0() { return cDirectiveSL_COMMENTTerminalRuleCall_0; }
	}

	public class FlowSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedDeclarationsFlowDeclarationParserRuleCall_1_0 = (RuleCall)cOwnedDeclarationsAssignment_1.eContents().get(0);
		
		////terminal Directive returns ecore::EString : "/ *" -> ";";
		//FlowSpecification:
		//	"flow" ownedDeclarations+=FlowDeclaration*;
		public ParserRule getRule() { return rule; }

		//"flow" ownedDeclarations+=FlowDeclaration*
		public Group getGroup() { return cGroup; }

		//"flow"
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }

		//ownedDeclarations+=FlowDeclaration*
		public Assignment getOwnedDeclarationsAssignment_1() { return cOwnedDeclarationsAssignment_1; }

		//FlowDeclaration
		public RuleCall getOwnedDeclarationsFlowDeclarationParserRuleCall_1_0() { return cOwnedDeclarationsFlowDeclarationParserRuleCall_1_0; }
	}

	public class FlowDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFlowsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFlowsFlowParserRuleCall_0_0 = (RuleCall)cOwnedFlowsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedFlowsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFlowsFlowParserRuleCall_1_1_0 = (RuleCall)cOwnedFlowsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainAbstractTypeRefParserRuleCall_3_0 = (RuleCall)cDomainAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKindAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKindFlowKindEnumRuleCall_4_1_0 = (RuleCall)cKindAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributeVariableAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributeAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FlowDeclaration:
		//	ownedFlows+=Flow ("," ownedFlows+=Flow)* ":" domain=AbstractTypeRef (":" kind=FlowKind)? (":"
		//	attribute=VariableAttribute)? ";";
		public ParserRule getRule() { return rule; }

		//ownedFlows+=Flow ("," ownedFlows+=Flow)* ":" domain=AbstractTypeRef (":" kind=FlowKind)? (":"
		//attribute=VariableAttribute)? ";"
		public Group getGroup() { return cGroup; }

		//ownedFlows+=Flow
		public Assignment getOwnedFlowsAssignment_0() { return cOwnedFlowsAssignment_0; }

		//Flow
		public RuleCall getOwnedFlowsFlowParserRuleCall_0_0() { return cOwnedFlowsFlowParserRuleCall_0_0; }

		//("," ownedFlows+=Flow)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ownedFlows+=Flow
		public Assignment getOwnedFlowsAssignment_1_1() { return cOwnedFlowsAssignment_1_1; }

		//Flow
		public RuleCall getOwnedFlowsFlowParserRuleCall_1_1_0() { return cOwnedFlowsFlowParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//domain=AbstractTypeRef
		public Assignment getDomainAssignment_3() { return cDomainAssignment_3; }

		//AbstractTypeRef
		public RuleCall getDomainAbstractTypeRefParserRuleCall_3_0() { return cDomainAbstractTypeRefParserRuleCall_3_0; }

		//(":" kind=FlowKind)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//kind=FlowKind
		public Assignment getKindAssignment_4_1() { return cKindAssignment_4_1; }

		//FlowKind
		public RuleCall getKindFlowKindEnumRuleCall_4_1_0() { return cKindFlowKindEnumRuleCall_4_1_0; }

		//(":" attribute=VariableAttribute)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//attribute=VariableAttribute
		public Assignment getAttributeAssignment_5_1() { return cAttributeAssignment_5_1; }

		//VariableAttribute
		public RuleCall getAttributeVariableAttributeParserRuleCall_5_1_0() { return cAttributeVariableAttributeParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Flow:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EventSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedEventDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedEventDeclarationsEventDeclarationParserRuleCall_1_0 = (RuleCall)cOwnedEventDeclarationsAssignment_1.eContents().get(0);
		
		//EventSpecification:
		//	"event" ownedEventDeclarations+=EventDeclaration*;
		public ParserRule getRule() { return rule; }

		//"event" ownedEventDeclarations+=EventDeclaration*
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//ownedEventDeclarations+=EventDeclaration*
		public Assignment getOwnedEventDeclarationsAssignment_1() { return cOwnedEventDeclarationsAssignment_1; }

		//EventDeclaration
		public RuleCall getOwnedEventDeclarationsEventDeclarationParserRuleCall_1_0() { return cOwnedEventDeclarationsEventDeclarationParserRuleCall_1_0; }
	}

	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedEventsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedEventsEventParserRuleCall_0_0 = (RuleCall)cOwnedEventsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedEventsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedEventsEventParserRuleCall_1_1_0 = (RuleCall)cOwnedEventsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeVariableAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EventDeclaration:
		//	ownedEvents+=Event ("," ownedEvents+=Event)* (":" attribute=VariableAttribute)? ";";
		public ParserRule getRule() { return rule; }

		//ownedEvents+=Event ("," ownedEvents+=Event)* (":" attribute=VariableAttribute)? ";"
		public Group getGroup() { return cGroup; }

		//ownedEvents+=Event
		public Assignment getOwnedEventsAssignment_0() { return cOwnedEventsAssignment_0; }

		//Event
		public RuleCall getOwnedEventsEventParserRuleCall_0_0() { return cOwnedEventsEventParserRuleCall_0_0; }

		//("," ownedEvents+=Event)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ownedEvents+=Event
		public Assignment getOwnedEventsAssignment_1_1() { return cOwnedEventsAssignment_1_1; }

		//Event
		public RuleCall getOwnedEventsEventParserRuleCall_1_1_0() { return cOwnedEventsEventParserRuleCall_1_1_0; }

		//(":" attribute=VariableAttribute)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//attribute=VariableAttribute
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }

		//VariableAttribute
		public RuleCall getAttributeVariableAttributeParserRuleCall_2_1_0() { return cAttributeVariableAttributeParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedPriorityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedPriorityPriorityParserRuleCall_1_1_0 = (RuleCall)cOwnedPriorityAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Event:
		//	name=ID ("[" ownedPriority=Priority "]")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("[" ownedPriority=Priority "]")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("[" ownedPriority=Priority "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//ownedPriority=Priority
		public Assignment getOwnedPriorityAssignment_1_1() { return cOwnedPriorityAssignment_1_1; }

		//Priority
		public RuleCall getOwnedPriorityPriorityParserRuleCall_1_1_0() { return cOwnedPriorityPriorityParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Priority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPriorityKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedExpressionAbstractExpressionParserRuleCall_1_0 = (RuleCall)cOwnedExpressionAssignment_1.eContents().get(0);
		
		//Priority:
		//	("!" | "priority") ownedExpression=AbstractExpression;
		public ParserRule getRule() { return rule; }

		//("!" | "priority") ownedExpression=AbstractExpression
		public Group getGroup() { return cGroup; }

		//"!" | "priority"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//"priority"
		public Keyword getPriorityKeyword_0_1() { return cPriorityKeyword_0_1; }

		//ownedExpression=AbstractExpression
		public Assignment getOwnedExpressionAssignment_1() { return cOwnedExpressionAssignment_1; }

		//AbstractExpression
		public RuleCall getOwnedExpressionAbstractExpressionParserRuleCall_1_0() { return cOwnedExpressionAbstractExpressionParserRuleCall_1_0; }
	}

	public class StateSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedStateDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedStateDeclarationsStateDeclarationParserRuleCall_1_0 = (RuleCall)cOwnedStateDeclarationsAssignment_1.eContents().get(0);
		
		//StateSpecification:
		//	"state" ownedStateDeclarations+=StateDeclaration*;
		public ParserRule getRule() { return rule; }

		//"state" ownedStateDeclarations+=StateDeclaration*
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//ownedStateDeclarations+=StateDeclaration*
		public Assignment getOwnedStateDeclarationsAssignment_1() { return cOwnedStateDeclarationsAssignment_1; }

		//StateDeclaration
		public RuleCall getOwnedStateDeclarationsStateDeclarationParserRuleCall_1_0() { return cOwnedStateDeclarationsStateDeclarationParserRuleCall_1_0; }
	}

	public class StateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedStatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedStatesStateParserRuleCall_0_0 = (RuleCall)cOwnedStatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedStatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedStatesStateParserRuleCall_1_1_0 = (RuleCall)cOwnedStatesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainAbstractTypeRefParserRuleCall_3_0 = (RuleCall)cDomainAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributeVariableAttributeParserRuleCall_4_1_0 = (RuleCall)cAttributeAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StateDeclaration:
		//	ownedStates+=State ("," ownedStates+=State)* ":" domain=AbstractTypeRef (":" attribute=VariableAttribute)? ";";
		public ParserRule getRule() { return rule; }

		//ownedStates+=State ("," ownedStates+=State)* ":" domain=AbstractTypeRef (":" attribute=VariableAttribute)? ";"
		public Group getGroup() { return cGroup; }

		//ownedStates+=State
		public Assignment getOwnedStatesAssignment_0() { return cOwnedStatesAssignment_0; }

		//State
		public RuleCall getOwnedStatesStateParserRuleCall_0_0() { return cOwnedStatesStateParserRuleCall_0_0; }

		//("," ownedStates+=State)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ownedStates+=State
		public Assignment getOwnedStatesAssignment_1_1() { return cOwnedStatesAssignment_1_1; }

		//State
		public RuleCall getOwnedStatesStateParserRuleCall_1_1_0() { return cOwnedStatesStateParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//domain=AbstractTypeRef
		public Assignment getDomainAssignment_3() { return cDomainAssignment_3; }

		//AbstractTypeRef
		public RuleCall getDomainAbstractTypeRefParserRuleCall_3_0() { return cDomainAbstractTypeRefParserRuleCall_3_0; }

		//(":" attribute=VariableAttribute)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//attribute=VariableAttribute
		public Assignment getAttributeAssignment_4_1() { return cAttributeAssignment_4_1; }

		//VariableAttribute
		public RuleCall getAttributeVariableAttributeParserRuleCall_4_1_0() { return cAttributeVariableAttributeParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AbstractTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractDomainParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractTypeRef:
		//	DomainRef | AbstractDomain;
		public ParserRule getRule() { return rule; }

		//DomainRef | AbstractDomain
		public Alternatives getAlternatives() { return cAlternatives; }

		//DomainRef
		public RuleCall getDomainRefParserRuleCall_0() { return cDomainRefParserRuleCall_0; }

		//AbstractDomain
		public RuleCall getAbstractDomainParserRuleCall_1() { return cAbstractDomainParserRuleCall_1; }
	}

	public class DomainRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainRef");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferenceDomainCrossReference_0 = (CrossReference)cReferenceAssignment.eContents().get(0);
		private final RuleCall cReferenceDomainIDTerminalRuleCall_0_1 = (RuleCall)cReferenceDomainCrossReference_0.eContents().get(1);
		
		//DomainRef:
		//	reference=[Domain];
		public ParserRule getRule() { return rule; }

		//reference=[Domain]
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }

		//[Domain]
		public CrossReference getReferenceDomainCrossReference_0() { return cReferenceDomainCrossReference_0; }

		//ID
		public RuleCall getReferenceDomainIDTerminalRuleCall_0_1() { return cReferenceDomainIDTerminalRuleCall_0_1; }
	}

	public class NodeInstanceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeInstanceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedNodeInstanceDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedNodeInstanceDeclarationsNodeInstanceDeclarationParserRuleCall_1_0 = (RuleCall)cOwnedNodeInstanceDeclarationsAssignment_1.eContents().get(0);
		
		//NodeInstanceSpecification:
		//	"sub" ownedNodeInstanceDeclarations+=NodeInstanceDeclaration*;
		public ParserRule getRule() { return rule; }

		//"sub" ownedNodeInstanceDeclarations+=NodeInstanceDeclaration*
		public Group getGroup() { return cGroup; }

		//"sub"
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }

		//ownedNodeInstanceDeclarations+=NodeInstanceDeclaration*
		public Assignment getOwnedNodeInstanceDeclarationsAssignment_1() { return cOwnedNodeInstanceDeclarationsAssignment_1; }

		//NodeInstanceDeclaration
		public RuleCall getOwnedNodeInstanceDeclarationsNodeInstanceDeclarationParserRuleCall_1_0() { return cOwnedNodeInstanceDeclarationsNodeInstanceDeclarationParserRuleCall_1_0; }
	}

	public class NodeInstanceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeInstanceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedNodeInstancesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedNodeInstancesNodeInstanceParserRuleCall_0_0 = (RuleCall)cOwnedNodeInstancesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedNodeInstancesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedNodeInstancesNodeInstanceParserRuleCall_1_1_0 = (RuleCall)cOwnedNodeInstancesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodeTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNodeTypeNodeCrossReference_3_0 = (CrossReference)cNodeTypeAssignment_3.eContents().get(0);
		private final RuleCall cNodeTypeNodeIDTerminalRuleCall_3_0_1 = (RuleCall)cNodeTypeNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NodeInstanceDeclaration:
		//	ownedNodeInstances+=NodeInstance ("," ownedNodeInstances+=NodeInstance)* ":" nodeType=[Node] ";";
		public ParserRule getRule() { return rule; }

		//ownedNodeInstances+=NodeInstance ("," ownedNodeInstances+=NodeInstance)* ":" nodeType=[Node] ";"
		public Group getGroup() { return cGroup; }

		//ownedNodeInstances+=NodeInstance
		public Assignment getOwnedNodeInstancesAssignment_0() { return cOwnedNodeInstancesAssignment_0; }

		//NodeInstance
		public RuleCall getOwnedNodeInstancesNodeInstanceParserRuleCall_0_0() { return cOwnedNodeInstancesNodeInstanceParserRuleCall_0_0; }

		//("," ownedNodeInstances+=NodeInstance)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ownedNodeInstances+=NodeInstance
		public Assignment getOwnedNodeInstancesAssignment_1_1() { return cOwnedNodeInstancesAssignment_1_1; }

		//NodeInstance
		public RuleCall getOwnedNodeInstancesNodeInstanceParserRuleCall_1_1_0() { return cOwnedNodeInstancesNodeInstanceParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//nodeType=[Node]
		public Assignment getNodeTypeAssignment_3() { return cNodeTypeAssignment_3; }

		//[Node]
		public CrossReference getNodeTypeNodeCrossReference_3_0() { return cNodeTypeNodeCrossReference_3_0; }

		//ID
		public RuleCall getNodeTypeNodeIDTerminalRuleCall_3_0_1() { return cNodeTypeNodeIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NodeInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeInstance");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NodeInstance:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AssertSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedAssertsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedAssertsAssertParserRuleCall_1_0 = (RuleCall)cOwnedAssertsAssignment_1.eContents().get(0);
		
		//AssertSpecification:
		//	"assert" ownedAsserts+=Assert*;
		public ParserRule getRule() { return rule; }

		//"assert" ownedAsserts+=Assert*
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//ownedAsserts+=Assert*
		public Assignment getOwnedAssertsAssignment_1() { return cOwnedAssertsAssignment_1; }

		//Assert
		public RuleCall getOwnedAssertsAssertParserRuleCall_1_0() { return cOwnedAssertsAssertParserRuleCall_1_0; }
	}

	public class AssertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedExpressionsAbstractBooleanExpressionParserRuleCall_0_0 = (RuleCall)cOwnedExpressionsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Assert:
		//	ownedExpressions+=AbstractBooleanExpression ";";
		public ParserRule getRule() { return rule; }

		//ownedExpressions+=AbstractBooleanExpression ";"
		public Group getGroup() { return cGroup; }

		//ownedExpressions+=AbstractBooleanExpression
		public Assignment getOwnedExpressionsAssignment_0() { return cOwnedExpressionsAssignment_0; }

		//AbstractBooleanExpression
		public RuleCall getOwnedExpressionsAbstractBooleanExpressionParserRuleCall_0_0() { return cOwnedExpressionsAbstractBooleanExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class VectorSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VectorSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSyncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedVectorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedVectorsVectorParserRuleCall_1_0 = (RuleCall)cOwnedVectorsAssignment_1.eContents().get(0);
		
		//VectorSpecification:
		//	"sync" ownedVectors+=Vector*;
		public ParserRule getRule() { return rule; }

		//"sync" ownedVectors+=Vector*
		public Group getGroup() { return cGroup; }

		//"sync"
		public Keyword getSyncKeyword_0() { return cSyncKeyword_0; }

		//ownedVectors+=Vector*
		public Assignment getOwnedVectorsAssignment_1() { return cOwnedVectorsAssignment_1; }

		//Vector
		public RuleCall getOwnedVectorsVectorParserRuleCall_1_0() { return cOwnedVectorsVectorParserRuleCall_1_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedParametersVectorParameterParserRuleCall_1_0 = (RuleCall)cOwnedParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedParametersVectorParameterParserRuleCall_2_1_0 = (RuleCall)cOwnedParametersAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCardinalityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCardinalityCardinalityParserRuleCall_4_1_0 = (RuleCall)cCardinalityAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Vector:
		//	"<" ownedParameters+=VectorParameter ("," ownedParameters+=VectorParameter)* ">" ("[" cardinality=Cardinality "]")?
		//	";";
		public ParserRule getRule() { return rule; }

		//"<" ownedParameters+=VectorParameter ("," ownedParameters+=VectorParameter)* ">" ("[" cardinality=Cardinality "]")? ";"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//ownedParameters+=VectorParameter
		public Assignment getOwnedParametersAssignment_1() { return cOwnedParametersAssignment_1; }

		//VectorParameter
		public RuleCall getOwnedParametersVectorParameterParserRuleCall_1_0() { return cOwnedParametersVectorParameterParserRuleCall_1_0; }

		//("," ownedParameters+=VectorParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//ownedParameters+=VectorParameter
		public Assignment getOwnedParametersAssignment_2_1() { return cOwnedParametersAssignment_2_1; }

		//VectorParameter
		public RuleCall getOwnedParametersVectorParameterParserRuleCall_2_1_0() { return cOwnedParametersVectorParameterParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//("[" cardinality=Cardinality "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4_1() { return cCardinalityAssignment_4_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_4_1_0() { return cCardinalityCardinalityParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class VectorParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VectorParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventParameterEventRefParserRuleCall_0_0 = (RuleCall)cEventParameterAssignment_0.eContents().get(0);
		private final Assignment cIsRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsRequiredQuestionMarkKeyword_1_0 = (Keyword)cIsRequiredAssignment_1.eContents().get(0);
		
		//VectorParameter:
		//	eventParameter=EventRef isRequired?="?"?;
		public ParserRule getRule() { return rule; }

		//eventParameter=EventRef isRequired?="?"?
		public Group getGroup() { return cGroup; }

		//eventParameter=EventRef
		public Assignment getEventParameterAssignment_0() { return cEventParameterAssignment_0; }

		//EventRef
		public RuleCall getEventParameterEventRefParserRuleCall_0_0() { return cEventParameterEventRefParserRuleCall_0_0; }

		//isRequired?="?"?
		public Assignment getIsRequiredAssignment_1() { return cIsRequiredAssignment_1; }

		//"?"
		public Keyword getIsRequiredQuestionMarkKeyword_1_0() { return cIsRequiredQuestionMarkKeyword_1_0; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionAbstractExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionAbstractExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionAbstractExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//Cardinality:
		//	">" expression=AbstractExpression | ">=" expression=AbstractExpression | "=" expression=AbstractExpression;
		public ParserRule getRule() { return rule; }

		//">" expression=AbstractExpression | ">=" expression=AbstractExpression | "=" expression=AbstractExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//">" expression=AbstractExpression
		public Group getGroup_0() { return cGroup_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }

		//expression=AbstractExpression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//AbstractExpression
		public RuleCall getExpressionAbstractExpressionParserRuleCall_0_1_0() { return cExpressionAbstractExpressionParserRuleCall_0_1_0; }

		//">=" expression=AbstractExpression
		public Group getGroup_1() { return cGroup_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0() { return cGreaterThanSignEqualsSignKeyword_1_0; }

		//expression=AbstractExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//AbstractExpression
		public RuleCall getExpressionAbstractExpressionParserRuleCall_1_1_0() { return cExpressionAbstractExpressionParserRuleCall_1_1_0; }

		//"=" expression=AbstractExpression
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expression=AbstractExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//AbstractExpression
		public RuleCall getExpressionAbstractExpressionParserRuleCall_2_1_0() { return cExpressionAbstractExpressionParserRuleCall_2_1_0; }
	}

	public class TransitionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedTransitionTransitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedTransitionTransitionsTransitionParserRuleCall_1_0 = (RuleCall)cOwnedTransitionTransitionsAssignment_1.eContents().get(0);
		
		//TransitionSpecification:
		//	"trans" ownedTransitionTransitions+=Transition*;
		public ParserRule getRule() { return rule; }

		//"trans" ownedTransitionTransitions+=Transition*
		public Group getGroup() { return cGroup; }

		//"trans"
		public Keyword getTransKeyword_0() { return cTransKeyword_0; }

		//ownedTransitionTransitions+=Transition*
		public Assignment getOwnedTransitionTransitionsAssignment_1() { return cOwnedTransitionTransitionsAssignment_1; }

		//Transition
		public RuleCall getOwnedTransitionTransitionsTransitionParserRuleCall_1_0() { return cOwnedTransitionTransitionsTransitionParserRuleCall_1_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedExpresionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedExpresionAbstractExpressionParserRuleCall_0_0 = (RuleCall)cOwnedExpresionAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventEventCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_2_0_1 = (RuleCall)cEventEventCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOwnedAffectationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedAffectationsAffectationParserRuleCall_4_0_0 = (RuleCall)cOwnedAffectationsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedAffectationsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOwnedAffectationsAffectationParserRuleCall_4_1_1_0 = (RuleCall)cOwnedAffectationsAssignment_4_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Transition:
		//	ownedExpresion=AbstractExpression "|-" event=[Event] "->" (ownedAffectations+=Affectation (","
		//	ownedAffectations+=Affectation)*)* ";";
		public ParserRule getRule() { return rule; }

		//ownedExpresion=AbstractExpression "|-" event=[Event] "->" (ownedAffectations+=Affectation (","
		//ownedAffectations+=Affectation)*)* ";"
		public Group getGroup() { return cGroup; }

		//ownedExpresion=AbstractExpression
		public Assignment getOwnedExpresionAssignment_0() { return cOwnedExpresionAssignment_0; }

		//AbstractExpression
		public RuleCall getOwnedExpresionAbstractExpressionParserRuleCall_0_0() { return cOwnedExpresionAbstractExpressionParserRuleCall_0_0; }

		//"|-"
		public Keyword getVerticalLineHyphenMinusKeyword_1() { return cVerticalLineHyphenMinusKeyword_1; }

		//event=[Event]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//[Event]
		public CrossReference getEventEventCrossReference_2_0() { return cEventEventCrossReference_2_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_2_0_1() { return cEventEventIDTerminalRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//(ownedAffectations+=Affectation ("," ownedAffectations+=Affectation)*)*
		public Group getGroup_4() { return cGroup_4; }

		//ownedAffectations+=Affectation
		public Assignment getOwnedAffectationsAssignment_4_0() { return cOwnedAffectationsAssignment_4_0; }

		//Affectation
		public RuleCall getOwnedAffectationsAffectationParserRuleCall_4_0_0() { return cOwnedAffectationsAffectationParserRuleCall_4_0_0; }

		//("," ownedAffectations+=Affectation)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//ownedAffectations+=Affectation
		public Assignment getOwnedAffectationsAssignment_4_1_1() { return cOwnedAffectationsAssignment_4_1_1; }

		//Affectation
		public RuleCall getOwnedAffectationsAffectationParserRuleCall_4_1_1_0() { return cOwnedAffectationsAffectationParserRuleCall_4_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStateStateCrossReference_0_0 = (CrossReference)cStateAssignment_0.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_0_0_1 = (RuleCall)cStateStateCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedExpressionAbstractExpressionParserRuleCall_2_0 = (RuleCall)cOwnedExpressionAssignment_2.eContents().get(0);
		
		//Affectation:
		//	state=[State] ":=" ownedExpression=AbstractExpression;
		public ParserRule getRule() { return rule; }

		//state=[State] ":=" ownedExpression=AbstractExpression
		public Group getGroup() { return cGroup; }

		//state=[State]
		public Assignment getStateAssignment_0() { return cStateAssignment_0; }

		//[State]
		public CrossReference getStateStateCrossReference_0_0() { return cStateStateCrossReference_0_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_0_0_1() { return cStateStateIDTerminalRuleCall_0_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//ownedExpression=AbstractExpression
		public Assignment getOwnedExpressionAssignment_2() { return cOwnedExpressionAssignment_2; }

		//AbstractExpression
		public RuleCall getOwnedExpressionAbstractExpressionParserRuleCall_2_0() { return cOwnedExpressionAbstractExpressionParserRuleCall_2_0; }
	}

	public class AbstractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfThenElseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSwitchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractExpression:
		//	IfThenElse | Switch | Expression;
		public ParserRule getRule() { return rule; }

		//IfThenElse | Switch | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_0() { return cIfThenElseParserRuleCall_0; }

		//Switch
		public RuleCall getSwitchParserRuleCall_1() { return cSwitchParserRuleCall_1; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}

	public class AbstractBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractBooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfThenElseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSwitchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractBooleanExpression:
		//	IfThenElse | Switch | BooleanExpression;
		public ParserRule getRule() { return rule; }

		//IfThenElse | Switch | BooleanExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_0() { return cIfThenElseParserRuleCall_0; }

		//Switch
		public RuleCall getSwitchParserRuleCall_1() { return cSwitchParserRuleCall_1; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_2() { return cBooleanExpressionParserRuleCall_2; }
	}

	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedCasesCaseExpressionParserRuleCall_1_0 = (RuleCall)cOwnedCasesAssignment_1.eContents().get(0);
		private final Keyword cElseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefaultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultExpressionParserRuleCall_3_0 = (RuleCall)cDefaultAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Switch:
		//	"case {" ownedCases+=CaseExpression* "else" default=Expression "}";
		public ParserRule getRule() { return rule; }

		//"case {" ownedCases+=CaseExpression* "else" default=Expression "}"
		public Group getGroup() { return cGroup; }

		//"case {"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//ownedCases+=CaseExpression*
		public Assignment getOwnedCasesAssignment_1() { return cOwnedCasesAssignment_1; }

		//CaseExpression
		public RuleCall getOwnedCasesCaseExpressionParserRuleCall_1_0() { return cOwnedCasesCaseExpressionParserRuleCall_1_0; }

		//"else"
		public Keyword getElseKeyword_2() { return cElseKeyword_2; }

		//default=Expression
		public Assignment getDefaultAssignment_3() { return cDefaultAssignment_3; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_3_0() { return cDefaultExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CaseExpression:
		//	condition=BooleanExpression ":" body=Expression ",";
		public ParserRule getRule() { return rule; }

		//condition=BooleanExpression ":" body=Expression ","
		public Group getGroup() { return cGroup; }

		//condition=BooleanExpression
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }

		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_0_0() { return cConditionBooleanExpressionParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//body=Expression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cThenAlternatives_3_0 = (Alternatives)cThenAssignment_3.eContents().get(0);
		private final RuleCall cThenSwitchParserRuleCall_3_0_0 = (RuleCall)cThenAlternatives_3_0.eContents().get(0);
		private final RuleCall cThenExpressionParserRuleCall_3_0_1 = (RuleCall)cThenAlternatives_3_0.eContents().get(1);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cElseAlternatives_5_0 = (Alternatives)cElseAssignment_5.eContents().get(0);
		private final RuleCall cElseSwitchParserRuleCall_5_0_0 = (RuleCall)cElseAlternatives_5_0.eContents().get(0);
		private final RuleCall cElseExpressionParserRuleCall_5_0_1 = (RuleCall)cElseAlternatives_5_0.eContents().get(1);
		
		//IfThenElse:
		//	"if" condition=BooleanExpression "then" then=(Switch | Expression) "else" else=(Switch | Expression);
		public ParserRule getRule() { return rule; }

		//"if" condition=BooleanExpression "then" then=(Switch | Expression) "else" else=(Switch | Expression)
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=BooleanExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_1_0() { return cConditionBooleanExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then=(Switch | Expression)
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Switch | Expression
		public Alternatives getThenAlternatives_3_0() { return cThenAlternatives_3_0; }

		//Switch
		public RuleCall getThenSwitchParserRuleCall_3_0_0() { return cThenSwitchParserRuleCall_3_0_0; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0_1() { return cThenExpressionParserRuleCall_3_0_1; }

		//"else"
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }

		//else=(Switch | Expression)
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }

		//Switch | Expression
		public Alternatives getElseAlternatives_5_0() { return cElseAlternatives_5_0; }

		//Switch
		public RuleCall getElseSwitchParserRuleCall_5_0_0() { return cElseSwitchParserRuleCall_5_0_0; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_5_0_1() { return cElseExpressionParserRuleCall_5_0_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandMinusParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	Minus ({Addition.leftOperand=current} "+" rightOperand=Minus)*;
		public ParserRule getRule() { return rule; }

		//Minus ({Addition.leftOperand=current} "+" rightOperand=Minus)*
		public Group getGroup() { return cGroup; }

		//Minus
		public RuleCall getMinusParserRuleCall_0() { return cMinusParserRuleCall_0; }

		//({Addition.leftOperand=current} "+" rightOperand=Minus)*
		public Group getGroup_1() { return cGroup_1; }

		//{Addition.leftOperand=current}
		public Action getAdditionLeftOperandAction_1_0() { return cAdditionLeftOperandAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//rightOperand=Minus
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Minus
		public RuleCall getRightOperandMinusParserRuleCall_1_2_0() { return cRightOperandMinusParserRuleCall_1_2_0; }
	}

	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMinusLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Minus returns Expression:
		//	Multiplication ({Minus.leftOperand=current} "-" rightOperand=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Minus.leftOperand=current} "-" rightOperand=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Minus.leftOperand=current} "-" rightOperand=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Minus.leftOperand=current}
		public Action getMinusLeftOperandAction_1_0() { return cMinusLeftOperandAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//rightOperand=Multiplication
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Multiplication
		public RuleCall getRightOperandMultiplicationParserRuleCall_1_2_0() { return cRightOperandMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandDivisionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Division ({Multiplication.leftOperand=current} "*" rightOperand=Division)*;
		public ParserRule getRule() { return rule; }

		//Division ({Multiplication.leftOperand=current} "*" rightOperand=Division)*
		public Group getGroup() { return cGroup; }

		//Division
		public RuleCall getDivisionParserRuleCall_0() { return cDivisionParserRuleCall_0; }

		//({Multiplication.leftOperand=current} "*" rightOperand=Division)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplication.leftOperand=current}
		public Action getMultiplicationLeftOperandAction_1_0() { return cMultiplicationLeftOperandAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//rightOperand=Division
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Division
		public RuleCall getRightOperandDivisionParserRuleCall_1_2_0() { return cRightOperandDivisionParserRuleCall_1_2_0; }
	}

	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivisionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandBooleanExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Division returns Expression:
		//	BooleanExpression ({Division.leftOperand=current} "/" rightOperand=BooleanExpression)*;
		public ParserRule getRule() { return rule; }

		//BooleanExpression ({Division.leftOperand=current} "/" rightOperand=BooleanExpression)*
		public Group getGroup() { return cGroup; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0() { return cBooleanExpressionParserRuleCall_0; }

		//({Division.leftOperand=current} "/" rightOperand=BooleanExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Division.leftOperand=current}
		public Action getDivisionLeftOperandAction_1_0() { return cDivisionLeftOperandAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//rightOperand=BooleanExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//BooleanExpression
		public RuleCall getRightOperandBooleanExpressionParserRuleCall_1_2_0() { return cRightOperandBooleanExpressionParserRuleCall_1_2_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final RuleCall cAndParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanExpression returns Expression:
		//	And;
		public ParserRule getRule() { return rule; }

		//And
		public RuleCall getAndParserRuleCall() { return cAndParserRuleCall; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandOrParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//	Or ({And.leftOperand=current} ("and" | "&") rightOperand=Or)*;
		public ParserRule getRule() { return rule; }

		//Or ({And.leftOperand=current} ("and" | "&") rightOperand=Or)*
		public Group getGroup() { return cGroup; }

		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }

		//({And.leftOperand=current} ("and" | "&") rightOperand=Or)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.leftOperand=current}
		public Action getAndLeftOperandAction_1_0() { return cAndLeftOperandAction_1_0; }

		//"and" | "&"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"and"
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1_1() { return cAmpersandKeyword_1_1_1; }

		//rightOperand=Or
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Or
		public RuleCall getRightOperandOrParserRuleCall_1_2_0() { return cRightOperandOrParserRuleCall_1_2_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandEqualParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//	Equal ({Or.leftOperand=current} ("or" | "|") rightOperand=Equal)*;
		public ParserRule getRule() { return rule; }

		//Equal ({Or.leftOperand=current} ("or" | "|") rightOperand=Equal)*
		public Group getGroup() { return cGroup; }

		//Equal
		public RuleCall getEqualParserRuleCall_0() { return cEqualParserRuleCall_0; }

		//({Or.leftOperand=current} ("or" | "|") rightOperand=Equal)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.leftOperand=current}
		public Action getOrLeftOperandAction_1_0() { return cOrLeftOperandAction_1_0; }

		//"or" | "|"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"or"
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1_1() { return cVerticalLineKeyword_1_1_1; }

		//rightOperand=Equal
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Equal
		public RuleCall getRightOperandEqualParserRuleCall_1_2_0() { return cRightOperandEqualParserRuleCall_1_2_0; }
	}

	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNotEqualParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Equal returns Expression:
		//	NotEqual ({Equal.leftOperand=current} "=" rightOperand=NotEqual)*;
		public ParserRule getRule() { return rule; }

		//NotEqual ({Equal.leftOperand=current} "=" rightOperand=NotEqual)*
		public Group getGroup() { return cGroup; }

		//NotEqual
		public RuleCall getNotEqualParserRuleCall_0() { return cNotEqualParserRuleCall_0; }

		//({Equal.leftOperand=current} "=" rightOperand=NotEqual)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equal.leftOperand=current}
		public Action getEqualLeftOperandAction_1_0() { return cEqualLeftOperandAction_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//rightOperand=NotEqual
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NotEqual
		public RuleCall getRightOperandNotEqualParserRuleCall_1_2_0() { return cRightOperandNotEqualParserRuleCall_1_2_0; }
	}

	public class NotEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStrictLowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNotEqualLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandStrictLowerParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NotEqual returns Expression:
		//	StrictLower ({NotEqual.leftOperand=current} "!=" rightOperand=StrictLower)*;
		public ParserRule getRule() { return rule; }

		//StrictLower ({NotEqual.leftOperand=current} "!=" rightOperand=StrictLower)*
		public Group getGroup() { return cGroup; }

		//StrictLower
		public RuleCall getStrictLowerParserRuleCall_0() { return cStrictLowerParserRuleCall_0; }

		//({NotEqual.leftOperand=current} "!=" rightOperand=StrictLower)*
		public Group getGroup_1() { return cGroup_1; }

		//{NotEqual.leftOperand=current}
		public Action getNotEqualLeftOperandAction_1_0() { return cNotEqualLeftOperandAction_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }

		//rightOperand=StrictLower
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//StrictLower
		public RuleCall getRightOperandStrictLowerParserRuleCall_1_2_0() { return cRightOperandStrictLowerParserRuleCall_1_2_0; }
	}

	public class StrictLowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrictLower");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cStrictLowerLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLowerParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//StrictLower returns Expression:
		//	Lower ({StrictLower.leftOperand=current} "<" rightOperand=Lower)*;
		public ParserRule getRule() { return rule; }

		//Lower ({StrictLower.leftOperand=current} "<" rightOperand=Lower)*
		public Group getGroup() { return cGroup; }

		//Lower
		public RuleCall getLowerParserRuleCall_0() { return cLowerParserRuleCall_0; }

		//({StrictLower.leftOperand=current} "<" rightOperand=Lower)*
		public Group getGroup_1() { return cGroup_1; }

		//{StrictLower.leftOperand=current}
		public Action getStrictLowerLeftOperandAction_1_0() { return cStrictLowerLeftOperandAction_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//rightOperand=Lower
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Lower
		public RuleCall getRightOperandLowerParserRuleCall_1_2_0() { return cRightOperandLowerParserRuleCall_1_2_0; }
	}

	public class LowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lower");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStrictUpperParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLowerLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandStrictUpperParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Lower returns Expression:
		//	StrictUpper ({Lower.leftOperand=current} "<=" rightOperand=StrictUpper)*;
		public ParserRule getRule() { return rule; }

		//StrictUpper ({Lower.leftOperand=current} "<=" rightOperand=StrictUpper)*
		public Group getGroup() { return cGroup; }

		//StrictUpper
		public RuleCall getStrictUpperParserRuleCall_0() { return cStrictUpperParserRuleCall_0; }

		//({Lower.leftOperand=current} "<=" rightOperand=StrictUpper)*
		public Group getGroup_1() { return cGroup_1; }

		//{Lower.leftOperand=current}
		public Action getLowerLeftOperandAction_1_0() { return cLowerLeftOperandAction_1_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_1() { return cLessThanSignEqualsSignKeyword_1_1; }

		//rightOperand=StrictUpper
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//StrictUpper
		public RuleCall getRightOperandStrictUpperParserRuleCall_1_2_0() { return cRightOperandStrictUpperParserRuleCall_1_2_0; }
	}

	public class StrictUpperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrictUpper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUpperParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cStrictUpperLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandUpperParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//StrictUpper returns Expression:
		//	Upper ({StrictUpper.leftOperand=current} ">" rightOperand=Upper)*;
		public ParserRule getRule() { return rule; }

		//Upper ({StrictUpper.leftOperand=current} ">" rightOperand=Upper)*
		public Group getGroup() { return cGroup; }

		//Upper
		public RuleCall getUpperParserRuleCall_0() { return cUpperParserRuleCall_0; }

		//({StrictUpper.leftOperand=current} ">" rightOperand=Upper)*
		public Group getGroup_1() { return cGroup_1; }

		//{StrictUpper.leftOperand=current}
		public Action getStrictUpperLeftOperandAction_1_0() { return cStrictUpperLeftOperandAction_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }

		//rightOperand=Upper
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Upper
		public RuleCall getRightOperandUpperParserRuleCall_1_2_0() { return cRightOperandUpperParserRuleCall_1_2_0; }
	}

	public class UpperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Upper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImplyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUpperLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandImplyParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Upper returns Expression:
		//	Imply ({Upper.leftOperand=current} ">=" rightOperand=Imply)*;
		public ParserRule getRule() { return rule; }

		//Imply ({Upper.leftOperand=current} ">=" rightOperand=Imply)*
		public Group getGroup() { return cGroup; }

		//Imply
		public RuleCall getImplyParserRuleCall_0() { return cImplyParserRuleCall_0; }

		//({Upper.leftOperand=current} ">=" rightOperand=Imply)*
		public Group getGroup_1() { return cGroup_1; }

		//{Upper.leftOperand=current}
		public Action getUpperLeftOperandAction_1_0() { return cUpperLeftOperandAction_1_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1() { return cGreaterThanSignEqualsSignKeyword_1_1; }

		//rightOperand=Imply
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Imply
		public RuleCall getRightOperandImplyParserRuleCall_1_2_0() { return cRightOperandImplyParserRuleCall_1_2_0; }
	}

	public class ImplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplyLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNotParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//Imply returns Expression:
		//	Not ({Imply.leftOperand=current} "=>" rightOperand=Not)*;
		public ParserRule getRule() { return rule; }

		//Not ({Imply.leftOperand=current} "=>" rightOperand=Not)*
		public Group getGroup() { return cGroup; }

		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }

		//({Imply.leftOperand=current} "=>" rightOperand=Not)*
		public Group getGroup_1() { return cGroup_1; }

		//{Imply.leftOperand=current}
		public Action getImplyLeftOperandAction_1_0() { return cImplyLeftOperandAction_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }

		//rightOperand=Not
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//Not
		public RuleCall getRightOperandNotParserRuleCall_1_2_0() { return cRightOperandNotParserRuleCall_1_2_0; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cTildeKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cNotKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperandAtomParserRuleCall_0_1_0 = (RuleCall)cOperandAssignment_0_1.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Not returns Expression:
		//	("~" | "not") operand=Atom | Atom;
		public ParserRule getRule() { return rule; }

		//("~" | "not") operand=Atom | Atom
		public Alternatives getAlternatives() { return cAlternatives; }

		//("~" | "not") operand=Atom
		public Group getGroup_0() { return cGroup_0; }

		//"~" | "not"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"~"
		public Keyword getTildeKeyword_0_0_0() { return cTildeKeyword_0_0_0; }

		//"not"
		public Keyword getNotKeyword_0_0_1() { return cNotKeyword_0_0_1; }

		//operand=Atom
		public Assignment getOperandAssignment_0_1() { return cOperandAssignment_0_1; }

		//Atom
		public RuleCall getOperandAtomParserRuleCall_0_1_0() { return cOperandAtomParserRuleCall_0_1_0; }

		//Atom
		public RuleCall getAtomParserRuleCall_1() { return cAtomParserRuleCall_1; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Atom returns Expression:
		//	BooleanLiteral | StringLiteral | IntegerLiteral | VariableRef | "(" Expression ")";
		public ParserRule getRule() { return rule; }

		//BooleanLiteral | StringLiteral | IntegerLiteral | VariableRef | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_2() { return cIntegerLiteralParserRuleCall_2; }

		//VariableRef
		public RuleCall getVariableRefParserRuleCall_3() { return cVariableRefParserRuleCall_3; }

		//"(" Expression ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class EventRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableNavigableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableNavigableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableNavigableVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNestedQualifiedEventRefTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNestedVariableAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cNestedVariableNavigableVariableCrossReference_1_2_0 = (CrossReference)cNestedVariableAssignment_1_2.eContents().get(0);
		private final RuleCall cNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1 = (RuleCall)cNestedVariableNavigableVariableCrossReference_1_2_0.eContents().get(1);
		
		////('.' ownedFeature=QualifiedEventRef)?;
		//EventRef:
		//	variable=[NavigableVariable] ({NestedQualifiedEventRef.target=current} "." nestedVariable=[NavigableVariable])*;
		public ParserRule getRule() { return rule; }

		//variable=[NavigableVariable] ({NestedQualifiedEventRef.target=current} "." nestedVariable=[NavigableVariable])*
		public Group getGroup() { return cGroup; }

		//variable=[NavigableVariable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[NavigableVariable]
		public CrossReference getVariableNavigableVariableCrossReference_0_0() { return cVariableNavigableVariableCrossReference_0_0; }

		//ID
		public RuleCall getVariableNavigableVariableIDTerminalRuleCall_0_0_1() { return cVariableNavigableVariableIDTerminalRuleCall_0_0_1; }

		//({NestedQualifiedEventRef.target=current} "." nestedVariable=[NavigableVariable])*
		public Group getGroup_1() { return cGroup_1; }

		//{NestedQualifiedEventRef.target=current}
		public Action getNestedQualifiedEventRefTargetAction_1_0() { return cNestedQualifiedEventRefTargetAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//nestedVariable=[NavigableVariable]
		public Assignment getNestedVariableAssignment_1_2() { return cNestedVariableAssignment_1_2; }

		//[NavigableVariable]
		public CrossReference getNestedVariableNavigableVariableCrossReference_1_2_0() { return cNestedVariableNavigableVariableCrossReference_1_2_0; }

		//ID
		public RuleCall getNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1() { return cNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1; }
	}

	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableNavigableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableNavigableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableNavigableVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNestedQualifiedVariableRefTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNestedVariableAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cNestedVariableNavigableVariableCrossReference_1_2_0 = (CrossReference)cNestedVariableAssignment_1_2.eContents().get(0);
		private final RuleCall cNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1 = (RuleCall)cNestedVariableNavigableVariableCrossReference_1_2_0.eContents().get(1);
		
		//VariableRef:
		//	variable=[NavigableVariable] ({NestedQualifiedVariableRef.target=current} "." nestedVariable=[NavigableVariable])*;
		public ParserRule getRule() { return rule; }

		//variable=[NavigableVariable] ({NestedQualifiedVariableRef.target=current} "." nestedVariable=[NavigableVariable])*
		public Group getGroup() { return cGroup; }

		//variable=[NavigableVariable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[NavigableVariable]
		public CrossReference getVariableNavigableVariableCrossReference_0_0() { return cVariableNavigableVariableCrossReference_0_0; }

		//ID
		public RuleCall getVariableNavigableVariableIDTerminalRuleCall_0_0_1() { return cVariableNavigableVariableIDTerminalRuleCall_0_0_1; }

		//({NestedQualifiedVariableRef.target=current} "." nestedVariable=[NavigableVariable])*
		public Group getGroup_1() { return cGroup_1; }

		//{NestedQualifiedVariableRef.target=current}
		public Action getNestedQualifiedVariableRefTargetAction_1_0() { return cNestedQualifiedVariableRefTargetAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//nestedVariable=[NavigableVariable]
		public Assignment getNestedVariableAssignment_1_2() { return cNestedVariableAssignment_1_2; }

		//[NavigableVariable]
		public CrossReference getNestedVariableNavigableVariableCrossReference_1_2_0() { return cNestedVariableNavigableVariableCrossReference_1_2_0; }

		//ID
		public RuleCall getNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1() { return cNestedVariableNavigableVariableIDTerminalRuleCall_1_2_0_1; }
	}

	public class NavigableVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigableVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonNavigableVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NavigableVariable:
		//	NonNavigableVariable | NodeInstance | Event;
		public ParserRule getRule() { return rule; }

		//NonNavigableVariable | NodeInstance | Event
		public Alternatives getAlternatives() { return cAlternatives; }

		//NonNavigableVariable
		public RuleCall getNonNavigableVariableParserRuleCall_0() { return cNonNavigableVariableParserRuleCall_0; }

		//NodeInstance
		public RuleCall getNodeInstanceParserRuleCall_1() { return cNodeInstanceParserRuleCall_1; }

		//Event
		public RuleCall getEventParserRuleCall_2() { return cEventParserRuleCall_2; }
	}

	public class NonNavigableVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonNavigableVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFlowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NonNavigableVariable:
		//	State | Literal | Constant | Flow;
		public ParserRule getRule() { return rule; }

		//State | Literal | Constant | Flow
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }

		//Constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }

		//Flow
		public RuleCall getFlowParserRuleCall_3() { return cFlowParserRuleCall_3; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanLiteral returns EBoolean:
		//	value=("true" | "false");
		public ParserRule getRule() { return rule; }

		//value=("true" | "false")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"true" | "false"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral returns EString:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral returns EInteger:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	public class PrimitiveTypeKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTEGERIntegerKeyword_0_0 = (Keyword)cINTEGEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANBoolKeyword_1_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PrimitiveTypeKind:
		//	INTEGER="integer" | BOOLEAN="bool";
		public EnumRule getRule() { return rule; }

		//INTEGER="integer" | BOOLEAN="bool"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER="integer"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_0() { return cINTEGEREnumLiteralDeclaration_0; }

		//"integer"
		public Keyword getINTEGERIntegerKeyword_0_0() { return cINTEGERIntegerKeyword_0_0; }

		//BOOLEAN="bool"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_1() { return cBOOLEANEnumLiteralDeclaration_1; }

		//"bool"
		public Keyword getBOOLEANBoolKeyword_1_0() { return cBOOLEANBoolKeyword_1_0; }
	}

	public class FlowKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FlowKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINOUTInoutKeyword_2_0 = (Keyword)cINOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FlowKind:
		//	IN="in" | OUT="out" | INOUT="inout";
		public EnumRule getRule() { return rule; }

		//IN="in" | OUT="out" | INOUT="inout"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }

		//OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }

		//INOUT="inout"
		public EnumLiteralDeclaration getINOUTEnumLiteralDeclaration_2() { return cINOUTEnumLiteralDeclaration_2; }

		//"inout"
		public Keyword getINOUTInoutKeyword_2_0() { return cINOUTInoutKeyword_2_0; }
	}
	
	private SystemElements pSystem;
	private AbstractDeclarationElements pAbstractDeclaration;
	private ConstantDefinitionElements pConstantDefinition;
	private ConstantElements pConstant;
	private AbstractDefinitionConstantElements pAbstractDefinitionConstant;
	private ExpressionConstantElements pExpressionConstant;
	private DomainConstantElements pDomainConstant;
	private DomainElements pDomain;
	private AbstractDomainElements pAbstractDomain;
	private RangeElements pRange;
	private EnumerationElements pEnumeration;
	private PrimitiveTypeElements pPrimitiveType;
	private PrimitiveTypeKindElements unknownRulePrimitiveTypeKind;
	private LiteralElements pLiteral;
	private NodeElements pNode;
	private AbstractSpecificationElements pAbstractSpecification;
	private VariableAttributeElements pVariableAttribute;
	private InitSpecificationElements pInitSpecification;
	private InitStatementElements pInitStatement;
	private ExternalSpecificationElements pExternalSpecification;
	private ExternalDirectiveElements pExternalDirective;
	private FlowSpecificationElements pFlowSpecification;
	private FlowDeclarationElements pFlowDeclaration;
	private FlowKindElements unknownRuleFlowKind;
	private FlowElements pFlow;
	private EventSpecificationElements pEventSpecification;
	private EventDeclarationElements pEventDeclaration;
	private EventElements pEvent;
	private PriorityElements pPriority;
	private StateSpecificationElements pStateSpecification;
	private StateDeclarationElements pStateDeclaration;
	private StateElements pState;
	private AbstractTypeRefElements pAbstractTypeRef;
	private DomainRefElements pDomainRef;
	private NodeInstanceSpecificationElements pNodeInstanceSpecification;
	private NodeInstanceDeclarationElements pNodeInstanceDeclaration;
	private NodeInstanceElements pNodeInstance;
	private AssertSpecificationElements pAssertSpecification;
	private AssertElements pAssert;
	private VectorSpecificationElements pVectorSpecification;
	private VectorElements pVector;
	private VectorParameterElements pVectorParameter;
	private CardinalityElements pCardinality;
	private TransitionSpecificationElements pTransitionSpecification;
	private TransitionElements pTransition;
	private AffectationElements pAffectation;
	private AbstractExpressionElements pAbstractExpression;
	private AbstractBooleanExpressionElements pAbstractBooleanExpression;
	private SwitchElements pSwitch;
	private CaseExpressionElements pCaseExpression;
	private IfThenElseElements pIfThenElse;
	private ExpressionElements pExpression;
	private MinusElements pMinus;
	private MultiplicationElements pMultiplication;
	private DivisionElements pDivision;
	private BooleanExpressionElements pBooleanExpression;
	private AndElements pAnd;
	private OrElements pOr;
	private EqualElements pEqual;
	private NotEqualElements pNotEqual;
	private StrictLowerElements pStrictLower;
	private LowerElements pLower;
	private StrictUpperElements pStrictUpper;
	private UpperElements pUpper;
	private ImplyElements pImply;
	private NotElements pNot;
	private AtomElements pAtom;
	private EventRefElements pEventRef;
	private VariableRefElements pVariableRef;
	private NavigableVariableElements pNavigableVariable;
	private NonNavigableVariableElements pNonNavigableVariable;
	private BooleanLiteralElements pBooleanLiteral;
	private StringLiteralElements pStringLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AltaricaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	ownedDeclarations+=AbstractDeclaration*;
	public SystemElements getSystemAccess() {
		return (pSystem != null) ? pSystem : (pSystem = new SystemElements());
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//AbstractDeclaration:
	//	Domain | ConstantDefinition | Node;
	public AbstractDeclarationElements getAbstractDeclarationAccess() {
		return (pAbstractDeclaration != null) ? pAbstractDeclaration : (pAbstractDeclaration = new AbstractDeclarationElements());
	}
	
	public ParserRule getAbstractDeclarationRule() {
		return getAbstractDeclarationAccess().getRule();
	}

	//ConstantDefinition:
	//	"const" constant=Constant expression=AbstractDefinitionConstant ";";
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return (pConstantDefinition != null) ? pConstantDefinition : (pConstantDefinition = new ConstantDefinitionElements());
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//Constant:
	//	name=ID;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//AbstractDefinitionConstant:
	//	ExpressionConstant | DomainConstant;
	public AbstractDefinitionConstantElements getAbstractDefinitionConstantAccess() {
		return (pAbstractDefinitionConstant != null) ? pAbstractDefinitionConstant : (pAbstractDefinitionConstant = new AbstractDefinitionConstantElements());
	}
	
	public ParserRule getAbstractDefinitionConstantRule() {
		return getAbstractDefinitionConstantAccess().getRule();
	}

	//ExpressionConstant:
	//	"=" ownedExpression=Expression;
	public ExpressionConstantElements getExpressionConstantAccess() {
		return (pExpressionConstant != null) ? pExpressionConstant : (pExpressionConstant = new ExpressionConstantElements());
	}
	
	public ParserRule getExpressionConstantRule() {
		return getExpressionConstantAccess().getRule();
	}

	//DomainConstant:
	//	":" domain=AbstractDomain ("=" ownedExpression=Expression)?;
	public DomainConstantElements getDomainConstantAccess() {
		return (pDomainConstant != null) ? pDomainConstant : (pDomainConstant = new DomainConstantElements());
	}
	
	public ParserRule getDomainConstantRule() {
		return getDomainConstantAccess().getRule();
	}

	//Domain:
	//	"domain" name=ID "=" domain=AbstractDomain ";";
	public DomainElements getDomainAccess() {
		return (pDomain != null) ? pDomain : (pDomain = new DomainElements());
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//AbstractDomain:
	//	PrimitiveType | Range | Enumeration;
	public AbstractDomainElements getAbstractDomainAccess() {
		return (pAbstractDomain != null) ? pAbstractDomain : (pAbstractDomain = new AbstractDomainElements());
	}
	
	public ParserRule getAbstractDomainRule() {
		return getAbstractDomainAccess().getRule();
	}

	//Range:
	//	"[" lower=Atom "," upper=Atom "]";
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//Enumeration:
	//	"{" ownedLiterals+=Literal ("," ownedLiterals+=Literal)* "}";
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//PrimitiveType:
	//	name=PrimitiveTypeKind;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//enum PrimitiveTypeKind:
	//	INTEGER="integer" | BOOLEAN="bool";
	public PrimitiveTypeKindElements getPrimitiveTypeKindAccess() {
		return (unknownRulePrimitiveTypeKind != null) ? unknownRulePrimitiveTypeKind : (unknownRulePrimitiveTypeKind = new PrimitiveTypeKindElements());
	}
	
	public EnumRule getPrimitiveTypeKindRule() {
		return getPrimitiveTypeKindAccess().getRule();
	}

	//Literal:
	//	name=ID;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Node:
	//	"node" isMain?="Main"? name=ID ownedSpecifications+=AbstractSpecification* "edon";
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//AbstractSpecification:
	//	FlowSpecification | StateSpecification | EventSpecification | NodeInstanceSpecification | AssertSpecification |
	//	VectorSpecification | TransitionSpecification | InitSpecification | ExternalSpecification;
	public AbstractSpecificationElements getAbstractSpecificationAccess() {
		return (pAbstractSpecification != null) ? pAbstractSpecification : (pAbstractSpecification = new AbstractSpecificationElements());
	}
	
	public ParserRule getAbstractSpecificationRule() {
		return getAbstractSpecificationAccess().getRule();
	}

	//VariableAttribute:
	//	name=ID;
	public VariableAttributeElements getVariableAttributeAccess() {
		return (pVariableAttribute != null) ? pVariableAttribute : (pVariableAttribute = new VariableAttributeElements());
	}
	
	public ParserRule getVariableAttributeRule() {
		return getVariableAttributeAccess().getRule();
	}

	//InitSpecification:
	//	"init" ownedInitStatements+=InitStatement*;
	public InitSpecificationElements getInitSpecificationAccess() {
		return (pInitSpecification != null) ? pInitSpecification : (pInitSpecification = new InitSpecificationElements());
	}
	
	public ParserRule getInitSpecificationRule() {
		return getInitSpecificationAccess().getRule();
	}

	//InitStatement:
	//	affectation=Affectation ";";
	public InitStatementElements getInitStatementAccess() {
		return (pInitStatement != null) ? pInitStatement : (pInitStatement = new InitStatementElements());
	}
	
	public ParserRule getInitStatementRule() {
		return getInitStatementAccess().getRule();
	}

	//ExternalSpecification:
	//	"extern" ownedDirectives+=ExternalDirective*;
	public ExternalSpecificationElements getExternalSpecificationAccess() {
		return (pExternalSpecification != null) ? pExternalSpecification : (pExternalSpecification = new ExternalSpecificationElements());
	}
	
	public ParserRule getExternalSpecificationRule() {
		return getExternalSpecificationAccess().getRule();
	}

	//ExternalDirective:
	//	directive=SL_COMMENT;
	public ExternalDirectiveElements getExternalDirectiveAccess() {
		return (pExternalDirective != null) ? pExternalDirective : (pExternalDirective = new ExternalDirectiveElements());
	}
	
	public ParserRule getExternalDirectiveRule() {
		return getExternalDirectiveAccess().getRule();
	}

	////terminal Directive returns ecore::EString : "/ *" -> ";";
	//FlowSpecification:
	//	"flow" ownedDeclarations+=FlowDeclaration*;
	public FlowSpecificationElements getFlowSpecificationAccess() {
		return (pFlowSpecification != null) ? pFlowSpecification : (pFlowSpecification = new FlowSpecificationElements());
	}
	
	public ParserRule getFlowSpecificationRule() {
		return getFlowSpecificationAccess().getRule();
	}

	//FlowDeclaration:
	//	ownedFlows+=Flow ("," ownedFlows+=Flow)* ":" domain=AbstractTypeRef (":" kind=FlowKind)? (":"
	//	attribute=VariableAttribute)? ";";
	public FlowDeclarationElements getFlowDeclarationAccess() {
		return (pFlowDeclaration != null) ? pFlowDeclaration : (pFlowDeclaration = new FlowDeclarationElements());
	}
	
	public ParserRule getFlowDeclarationRule() {
		return getFlowDeclarationAccess().getRule();
	}

	//enum FlowKind:
	//	IN="in" | OUT="out" | INOUT="inout";
	public FlowKindElements getFlowKindAccess() {
		return (unknownRuleFlowKind != null) ? unknownRuleFlowKind : (unknownRuleFlowKind = new FlowKindElements());
	}
	
	public EnumRule getFlowKindRule() {
		return getFlowKindAccess().getRule();
	}

	//Flow:
	//	name=ID;
	public FlowElements getFlowAccess() {
		return (pFlow != null) ? pFlow : (pFlow = new FlowElements());
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//EventSpecification:
	//	"event" ownedEventDeclarations+=EventDeclaration*;
	public EventSpecificationElements getEventSpecificationAccess() {
		return (pEventSpecification != null) ? pEventSpecification : (pEventSpecification = new EventSpecificationElements());
	}
	
	public ParserRule getEventSpecificationRule() {
		return getEventSpecificationAccess().getRule();
	}

	//EventDeclaration:
	//	ownedEvents+=Event ("," ownedEvents+=Event)* (":" attribute=VariableAttribute)? ";";
	public EventDeclarationElements getEventDeclarationAccess() {
		return (pEventDeclaration != null) ? pEventDeclaration : (pEventDeclaration = new EventDeclarationElements());
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}

	//Event:
	//	name=ID ("[" ownedPriority=Priority "]")?;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Priority:
	//	("!" | "priority") ownedExpression=AbstractExpression;
	public PriorityElements getPriorityAccess() {
		return (pPriority != null) ? pPriority : (pPriority = new PriorityElements());
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}

	//StateSpecification:
	//	"state" ownedStateDeclarations+=StateDeclaration*;
	public StateSpecificationElements getStateSpecificationAccess() {
		return (pStateSpecification != null) ? pStateSpecification : (pStateSpecification = new StateSpecificationElements());
	}
	
	public ParserRule getStateSpecificationRule() {
		return getStateSpecificationAccess().getRule();
	}

	//StateDeclaration:
	//	ownedStates+=State ("," ownedStates+=State)* ":" domain=AbstractTypeRef (":" attribute=VariableAttribute)? ";";
	public StateDeclarationElements getStateDeclarationAccess() {
		return (pStateDeclaration != null) ? pStateDeclaration : (pStateDeclaration = new StateDeclarationElements());
	}
	
	public ParserRule getStateDeclarationRule() {
		return getStateDeclarationAccess().getRule();
	}

	//State:
	//	name=ID;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//AbstractTypeRef:
	//	DomainRef | AbstractDomain;
	public AbstractTypeRefElements getAbstractTypeRefAccess() {
		return (pAbstractTypeRef != null) ? pAbstractTypeRef : (pAbstractTypeRef = new AbstractTypeRefElements());
	}
	
	public ParserRule getAbstractTypeRefRule() {
		return getAbstractTypeRefAccess().getRule();
	}

	//DomainRef:
	//	reference=[Domain];
	public DomainRefElements getDomainRefAccess() {
		return (pDomainRef != null) ? pDomainRef : (pDomainRef = new DomainRefElements());
	}
	
	public ParserRule getDomainRefRule() {
		return getDomainRefAccess().getRule();
	}

	//NodeInstanceSpecification:
	//	"sub" ownedNodeInstanceDeclarations+=NodeInstanceDeclaration*;
	public NodeInstanceSpecificationElements getNodeInstanceSpecificationAccess() {
		return (pNodeInstanceSpecification != null) ? pNodeInstanceSpecification : (pNodeInstanceSpecification = new NodeInstanceSpecificationElements());
	}
	
	public ParserRule getNodeInstanceSpecificationRule() {
		return getNodeInstanceSpecificationAccess().getRule();
	}

	//NodeInstanceDeclaration:
	//	ownedNodeInstances+=NodeInstance ("," ownedNodeInstances+=NodeInstance)* ":" nodeType=[Node] ";";
	public NodeInstanceDeclarationElements getNodeInstanceDeclarationAccess() {
		return (pNodeInstanceDeclaration != null) ? pNodeInstanceDeclaration : (pNodeInstanceDeclaration = new NodeInstanceDeclarationElements());
	}
	
	public ParserRule getNodeInstanceDeclarationRule() {
		return getNodeInstanceDeclarationAccess().getRule();
	}

	//NodeInstance:
	//	name=ID;
	public NodeInstanceElements getNodeInstanceAccess() {
		return (pNodeInstance != null) ? pNodeInstance : (pNodeInstance = new NodeInstanceElements());
	}
	
	public ParserRule getNodeInstanceRule() {
		return getNodeInstanceAccess().getRule();
	}

	//AssertSpecification:
	//	"assert" ownedAsserts+=Assert*;
	public AssertSpecificationElements getAssertSpecificationAccess() {
		return (pAssertSpecification != null) ? pAssertSpecification : (pAssertSpecification = new AssertSpecificationElements());
	}
	
	public ParserRule getAssertSpecificationRule() {
		return getAssertSpecificationAccess().getRule();
	}

	//Assert:
	//	ownedExpressions+=AbstractBooleanExpression ";";
	public AssertElements getAssertAccess() {
		return (pAssert != null) ? pAssert : (pAssert = new AssertElements());
	}
	
	public ParserRule getAssertRule() {
		return getAssertAccess().getRule();
	}

	//VectorSpecification:
	//	"sync" ownedVectors+=Vector*;
	public VectorSpecificationElements getVectorSpecificationAccess() {
		return (pVectorSpecification != null) ? pVectorSpecification : (pVectorSpecification = new VectorSpecificationElements());
	}
	
	public ParserRule getVectorSpecificationRule() {
		return getVectorSpecificationAccess().getRule();
	}

	//Vector:
	//	"<" ownedParameters+=VectorParameter ("," ownedParameters+=VectorParameter)* ">" ("[" cardinality=Cardinality "]")?
	//	";";
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//VectorParameter:
	//	eventParameter=EventRef isRequired?="?"?;
	public VectorParameterElements getVectorParameterAccess() {
		return (pVectorParameter != null) ? pVectorParameter : (pVectorParameter = new VectorParameterElements());
	}
	
	public ParserRule getVectorParameterRule() {
		return getVectorParameterAccess().getRule();
	}

	//Cardinality:
	//	">" expression=AbstractExpression | ">=" expression=AbstractExpression | "=" expression=AbstractExpression;
	public CardinalityElements getCardinalityAccess() {
		return (pCardinality != null) ? pCardinality : (pCardinality = new CardinalityElements());
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//TransitionSpecification:
	//	"trans" ownedTransitionTransitions+=Transition*;
	public TransitionSpecificationElements getTransitionSpecificationAccess() {
		return (pTransitionSpecification != null) ? pTransitionSpecification : (pTransitionSpecification = new TransitionSpecificationElements());
	}
	
	public ParserRule getTransitionSpecificationRule() {
		return getTransitionSpecificationAccess().getRule();
	}

	//Transition:
	//	ownedExpresion=AbstractExpression "|-" event=[Event] "->" (ownedAffectations+=Affectation (","
	//	ownedAffectations+=Affectation)*)* ";";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Affectation:
	//	state=[State] ":=" ownedExpression=AbstractExpression;
	public AffectationElements getAffectationAccess() {
		return (pAffectation != null) ? pAffectation : (pAffectation = new AffectationElements());
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}

	//AbstractExpression:
	//	IfThenElse | Switch | Expression;
	public AbstractExpressionElements getAbstractExpressionAccess() {
		return (pAbstractExpression != null) ? pAbstractExpression : (pAbstractExpression = new AbstractExpressionElements());
	}
	
	public ParserRule getAbstractExpressionRule() {
		return getAbstractExpressionAccess().getRule();
	}

	//AbstractBooleanExpression:
	//	IfThenElse | Switch | BooleanExpression;
	public AbstractBooleanExpressionElements getAbstractBooleanExpressionAccess() {
		return (pAbstractBooleanExpression != null) ? pAbstractBooleanExpression : (pAbstractBooleanExpression = new AbstractBooleanExpressionElements());
	}
	
	public ParserRule getAbstractBooleanExpressionRule() {
		return getAbstractBooleanExpressionAccess().getRule();
	}

	//Switch:
	//	"case {" ownedCases+=CaseExpression* "else" default=Expression "}";
	public SwitchElements getSwitchAccess() {
		return (pSwitch != null) ? pSwitch : (pSwitch = new SwitchElements());
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}

	//CaseExpression:
	//	condition=BooleanExpression ":" body=Expression ",";
	public CaseExpressionElements getCaseExpressionAccess() {
		return (pCaseExpression != null) ? pCaseExpression : (pCaseExpression = new CaseExpressionElements());
	}
	
	public ParserRule getCaseExpressionRule() {
		return getCaseExpressionAccess().getRule();
	}

	//IfThenElse:
	//	"if" condition=BooleanExpression "then" then=(Switch | Expression) "else" else=(Switch | Expression);
	public IfThenElseElements getIfThenElseAccess() {
		return (pIfThenElse != null) ? pIfThenElse : (pIfThenElse = new IfThenElseElements());
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	//Expression:
	//	Minus ({Addition.leftOperand=current} "+" rightOperand=Minus)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Minus returns Expression:
	//	Multiplication ({Minus.leftOperand=current} "-" rightOperand=Multiplication)*;
	public MinusElements getMinusAccess() {
		return (pMinus != null) ? pMinus : (pMinus = new MinusElements());
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Division ({Multiplication.leftOperand=current} "*" rightOperand=Division)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Division returns Expression:
	//	BooleanExpression ({Division.leftOperand=current} "/" rightOperand=BooleanExpression)*;
	public DivisionElements getDivisionAccess() {
		return (pDivision != null) ? pDivision : (pDivision = new DivisionElements());
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}

	//BooleanExpression returns Expression:
	//	And;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//And returns Expression:
	//	Or ({And.leftOperand=current} ("and" | "&") rightOperand=Or)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or returns Expression:
	//	Equal ({Or.leftOperand=current} ("or" | "|") rightOperand=Equal)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Equal returns Expression:
	//	NotEqual ({Equal.leftOperand=current} "=" rightOperand=NotEqual)*;
	public EqualElements getEqualAccess() {
		return (pEqual != null) ? pEqual : (pEqual = new EqualElements());
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}

	//NotEqual returns Expression:
	//	StrictLower ({NotEqual.leftOperand=current} "!=" rightOperand=StrictLower)*;
	public NotEqualElements getNotEqualAccess() {
		return (pNotEqual != null) ? pNotEqual : (pNotEqual = new NotEqualElements());
	}
	
	public ParserRule getNotEqualRule() {
		return getNotEqualAccess().getRule();
	}

	//StrictLower returns Expression:
	//	Lower ({StrictLower.leftOperand=current} "<" rightOperand=Lower)*;
	public StrictLowerElements getStrictLowerAccess() {
		return (pStrictLower != null) ? pStrictLower : (pStrictLower = new StrictLowerElements());
	}
	
	public ParserRule getStrictLowerRule() {
		return getStrictLowerAccess().getRule();
	}

	//Lower returns Expression:
	//	StrictUpper ({Lower.leftOperand=current} "<=" rightOperand=StrictUpper)*;
	public LowerElements getLowerAccess() {
		return (pLower != null) ? pLower : (pLower = new LowerElements());
	}
	
	public ParserRule getLowerRule() {
		return getLowerAccess().getRule();
	}

	//StrictUpper returns Expression:
	//	Upper ({StrictUpper.leftOperand=current} ">" rightOperand=Upper)*;
	public StrictUpperElements getStrictUpperAccess() {
		return (pStrictUpper != null) ? pStrictUpper : (pStrictUpper = new StrictUpperElements());
	}
	
	public ParserRule getStrictUpperRule() {
		return getStrictUpperAccess().getRule();
	}

	//Upper returns Expression:
	//	Imply ({Upper.leftOperand=current} ">=" rightOperand=Imply)*;
	public UpperElements getUpperAccess() {
		return (pUpper != null) ? pUpper : (pUpper = new UpperElements());
	}
	
	public ParserRule getUpperRule() {
		return getUpperAccess().getRule();
	}

	//Imply returns Expression:
	//	Not ({Imply.leftOperand=current} "=>" rightOperand=Not)*;
	public ImplyElements getImplyAccess() {
		return (pImply != null) ? pImply : (pImply = new ImplyElements());
	}
	
	public ParserRule getImplyRule() {
		return getImplyAccess().getRule();
	}

	//Not returns Expression:
	//	("~" | "not") operand=Atom | Atom;
	public NotElements getNotAccess() {
		return (pNot != null) ? pNot : (pNot = new NotElements());
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//Atom returns Expression:
	//	BooleanLiteral | StringLiteral | IntegerLiteral | VariableRef | "(" Expression ")";
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	////('.' ownedFeature=QualifiedEventRef)?;
	//EventRef:
	//	variable=[NavigableVariable] ({NestedQualifiedEventRef.target=current} "." nestedVariable=[NavigableVariable])*;
	public EventRefElements getEventRefAccess() {
		return (pEventRef != null) ? pEventRef : (pEventRef = new EventRefElements());
	}
	
	public ParserRule getEventRefRule() {
		return getEventRefAccess().getRule();
	}

	//VariableRef:
	//	variable=[NavigableVariable] ({NestedQualifiedVariableRef.target=current} "." nestedVariable=[NavigableVariable])*;
	public VariableRefElements getVariableRefAccess() {
		return (pVariableRef != null) ? pVariableRef : (pVariableRef = new VariableRefElements());
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}

	//NavigableVariable:
	//	NonNavigableVariable | NodeInstance | Event;
	public NavigableVariableElements getNavigableVariableAccess() {
		return (pNavigableVariable != null) ? pNavigableVariable : (pNavigableVariable = new NavigableVariableElements());
	}
	
	public ParserRule getNavigableVariableRule() {
		return getNavigableVariableAccess().getRule();
	}

	//NonNavigableVariable:
	//	State | Literal | Constant | Flow;
	public NonNavigableVariableElements getNonNavigableVariableAccess() {
		return (pNonNavigableVariable != null) ? pNonNavigableVariable : (pNonNavigableVariable = new NonNavigableVariableElements());
	}
	
	public ParserRule getNonNavigableVariableRule() {
		return getNonNavigableVariableAccess().getRule();
	}

	//BooleanLiteral returns EBoolean:
	//	value=("true" | "false");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//StringLiteral returns EString:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//IntegerLiteral returns EInteger:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
